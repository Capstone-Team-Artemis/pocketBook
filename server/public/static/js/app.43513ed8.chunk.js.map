{"version":3,"sources":["client/store/user.js","client/store/events.js","client/store/event.js","client/store/userProfile.js","client/store/index.js","client/context.js","client/Sidebar.js","client/LandingPage.js","client/SingleBookView.js","client/SingleEvent.js","client/AllEvents.js","client/SingleEventView.js","client/CreateEvent.js","client/UserProfile.js","client/Chat.js","client/Login.js","client/SignUp.js","client/navigation/AuthNavigation.js","client/navigation/StackContainer.js","client/navigation/RootContainer.js","App.js"],"names":["changeImage","userId","imageURL","dispatch","a","async","axios","put","image","data","console","log","initialState","receivedEvents","events","type","all","reducer","state","action","createdEvent","newEvent","event","singleEvent","gotBooks","books","getBooks","get","error","userProfile","user","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","AuthContext","React","createContext","Sidebar","props","useSelector","useDispatch","useState","setImage","logOut","useContext","useEffect","fetchUser","View","style","flex","DrawerContentScrollView","ImageBackground","source","uri","width","undefined","padding","paddingTop","TouchableOpacity","onPress","ImagePicker","status","alert","allowsEditing","pickImage","cancelled","id","Number","Image","styles","profile","Text","name","userToken","flexDirection","Section","drawerSection","DrawerItem","icon","color","size","label","navigation","navigate","StyleSheet","create","container","height","borderRadius","borderWidth","borderColor","fontSize","fontWeight","followers","marginRight","LandingPage","book","setBook","result","setResult","modalVisible","setModalVisible","featureBook","setFeatureBook","params","q","key","orderBy","items","Math","floor","random","length","getRandomBook","SafeAreaView","ScrollView","scrollView","alignItems","margin","openDrawer","center","heading","inputContainer","TextInput","inputText","onChangeText","bookTitle","submitContainer","then","catch","err","submitText","published","alt","volumeInfo","title","imageLinks","thumbnail","centeredView","Modal","animationType","transparent","visible","bookList","map","idx","smallThumbnail","bookInfo","authors","averageRating","button","justifyContent","marginHorizontal","marginTop","paddingLeft","marginBottom","marginLeft","backgroundColor","textAlign","bottom","modalView","opacity","shadowOpacity","shadowRadius","elevation","SingleBookView","setStatus","route","googleId","getStatus","bookPath","textTitle","description","containerStyle","defaultValue","onChangeItem","item","value","Button","post","rating","delete","alignContent","SingleEvent","unregister","getEvents","register","bind","this","formattedStartTime","DateTime","fromISO","startTime","toLocaleString","TIME_SIMPLE","formattedEndTime","endTime","formattedDate","date","DATE_FULL","listContainer","eventData","eventTitle","time","registerButtonContainer","hostId","accessibilityLabel","users","Component","borderStyle","noEvents","AllEvents","createButtonContainer","itemStyle","dropDownStyle","activeLabelStyle","setState","filter","connect","fetchEvents","attendingButtonContainer","SingleEventView","clickMe","WIDTH","Dimensions","CreateEvent","startDate","Date","endDate","handleSubmit","handleDelete","handleGoBack","prevProps","host","eventId","update","toLocaleTimeString","hour","minute","hour12","Alert","navbar","input","placeholder","mode","display","onChange","selectedDate","selectedTime","TouchableHighlight","opPress","newEventInfo","postEvent","editedInfo","updatedEvent","updateEvent","deletedEvent","StatusBar","currentHeight","content","text","bookData","mybooks","currentBooks","futureRead","completed","horizontal","Chat","messages","setMessages","_id","createdAt","avatar","onSend","useCallback","previousMessages","GiftedChat","append","renderBubble","wrapperStyle","right","textStyle","alwaysShowSend","scrollToBottom","top","left","position","navContainer","marginVertical","btnEye","Login","secureTextEntry","setSecure","logIn","updateSecureTextEntry","initialValues","email","password","onSubmit","values","res","resizeMode","keyboardType","autoCapitalize","autoCorrect","handleChange","returnKeyType","loggedIn","nameText","nameContainer","errorMsg","SignUp","signUp","isValidEmail","isValidUser","isValidPassword","validate","setValidate","username","firstName","lastName","onEndEditing","e","val","nativeEvent","test","animation","duration","trim","Auth","createStackNavigator","AuthNavigation","Navigator","headerMode","initialRouteName","Screen","component","Stack","StackContainer","options","headerShown","UserProfile","headerBackTitleVisible","Drawer","createDrawerNavigator","RootContainer","useReducer","prevState","token","isLoading","loginState","authContext","useMemo","toString","AsyncStorage","setItem","removeItem","setTimeout","getItem","ActivityIndicator","Provider","NavigationContainer","drawerContent","initialParams","App"],"mappings":"sKAgCaA,EAAc,SAACC,EAAQC,GAClC,OAAO,SAAOC,GAAP,iBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEoBE,IAAMC,IAAN,mCACcN,EACnC,CACEO,MAAON,KALR,gBAEKO,EAFL,EAEKA,KAMRC,QAAQC,IAAI,2BAAyBF,GARlC,gDAWHC,QAAQC,IAAI,gCAXT,kEAiBHC,EAAe,G,klBC9CrB,IAGMC,EAAiB,SAACC,GAAD,MAAa,CAClCC,KAJsB,kBAKtBD,WAmBIF,EAAe,CACnBI,IAAK,IAgBQC,EAZC,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAChD,OAAQA,EAAOJ,MACb,IA/BoB,kBAgClB,OAAO,EAAP,KACKG,GADL,IAEEF,IAAKG,EAAOL,SAEhB,QACE,OAAOI,IC5BPE,EAAe,SAACC,GAAD,MAAe,CAClCN,KATmB,eAUnBM,aAgEIT,EAAe,GAYNU,EATD,WAAmC,IAAlCJ,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC9C,OAAQA,EAAOJ,MACb,IAjFc,YAkFZ,OAAOI,EAAOI,YAChB,QACE,OAAOL,IC3EPM,EAAW,SAACC,GAAD,MAAY,CAC3BV,KATgB,YAUhBU,UAeWC,EAAW,SAACzB,GAAD,OAAY,SAAOE,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEZE,IAAMqB,IAAN,mCAA6C1B,IAFjC,OAE1BwB,EAF0B,OAGhCtB,EAASqB,EAASC,EAAMhB,OAHQ,gDAKhCC,QAAQkB,MAAR,MALgC,kEAU9BhB,EAAe,GAcNiB,EAXK,WAAmC,IAAlCX,EAAiC,uDAAzBN,EAAcO,EAAW,uCACpD,OAAQA,EAAOJ,MACb,IAzCqB,mBA0CnB,OAAOI,EAAOW,KAChB,IA1Cc,YA2CZ,OAAOX,EAAOM,MAChB,QACE,OAAOP,IC1CPa,EAAcC,YAAgB,CAElCV,QACAR,SACAe,cACAC,KJyCa,WAAyC,IAA/BZ,EAA8B,uDAAtBN,EAAcO,EAAQ,uCACrD,OAAQA,EAAOJ,MACb,IApDkB,gBAqDhB,OAAOI,EAAOX,MAChB,IArDiB,eAsDf,OAAOW,EAAOW,KAChB,QACE,OAAOZ,MI3CEe,EAFDC,YAAYH,EAAaI,YAAgBC,M,oECd1CC,EAAcC,IAAMC,gB,qGC6HlBC,EA7GC,SAACC,GAEf,IAAMvC,EAAWwC,aAAY,SAACxB,GAAD,OAAWA,EAAMY,KAAKtB,SAEnDE,QAAQC,IAAI,gBAAcT,GAC1B,IAAMC,EAAWwC,cALQ,EAMCC,mBAAS1C,GANV,WAMlBM,EANkB,KAMXqC,EANW,KAQjBC,EAAWR,IAAMS,WAAWV,GAA5BS,OAGRE,qBAAU,WACR7C,ENZqB,SAACF,GACxB,OAAO,SAAOE,GAAP,iBAAAC,EAAAC,OAAA,gEAEHK,QAAQC,IAAI,wBAAsBV,GAF/B,WAAAG,EAAA,MAGoBE,IAAMqB,IAAN,mCACc1B,EADd,WAHpB,gBAGKQ,EAHL,EAGKA,KAGRC,QAAQC,IAAI,yBAAuBF,GACnCN,EAlByB,CAC7BY,KAJmB,eAKnBe,KAgByBrB,IAPlB,kDASHC,QAAQC,IAAI,mCATT,kEMWIsC,CAAUR,EAAMxC,WACxB,IAoBH,OACE,kBAACiD,EAAA,EAAD,CAAMC,MAAO,CAAEC,KAAM,IACnB,kBAACC,EAAA,EAA4BZ,EAC3B,kBAACa,EAAA,EAAD,CACEC,OAAQ,CACNC,IACE,kFAEJL,MAAO,CAAEM,WAAOC,EAAWC,QAAS,GAAIC,WAAY,KAEpD,kBAACC,EAAA,EAAD,CAAkBC,QA3BR,8BAAA1D,EAAAC,OAAA,kEAAAD,EAAA,MACO2D,OADP,mBAED,YAFC,EACVC,OADU,uBAGdC,MAAM,4DAHQ,6CAAA7D,EAAA,MAMU2D,IAAoC,CAC1DG,eAAe,KAPH,SAMRC,EANQ,QASCC,YACbvB,EAASsB,EAAUX,KACfa,EAAKC,OAAO7B,EAAMxC,QACtBE,EAASH,EAAYqE,EAAIF,EAAUX,OAZvB,+DA4BR,kBAACe,EAAA,EAAD,CACEhB,OAAQ,CACNC,IAAKhD,GAEP2C,MAAOqB,EAAOC,WAGlB,kBAACC,EAAA,EAAD,CAAMvB,MAAOqB,EAAOG,MAAOlC,EAAMmC,WACjC,kBAAC1B,EAAA,EAAD,CAAMC,MAAO,CAAE0B,cAAe,UAEhC,kBAAC,IAAOC,QAAR,CAAgB3B,MAAOqB,EAAOO,eAC5B,kBAACC,EAAA,EAAD,CACEC,KAAM,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACJ,kBAAC,IAAD,CAAMR,KAAK,SAASO,MAAOA,EAAOC,KAAMA,KAE1CC,MAAM,cACNtB,QAAS,WACPrB,EAAM4C,WAAWC,SAAS,kBAG9B,kBAACN,EAAA,EAAD,CACEC,KAAM,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACJ,kBAAC,IAAD,CAAMR,KAAK,OAAOO,MAAOA,EAAOC,KAAMA,KAExCC,MAAM,eACNtB,QAAS,WACPrB,EAAM4C,WAAWC,SAAS,kBAG9B,kBAACN,EAAA,EAAD,CACEC,KAAM,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACJ,kBAAC,IAAD,CAAMR,KAAK,WAAWO,MAAOA,EAAOC,KAAMA,KAE5CC,MAAM,SACNtB,QAAS,WACPrB,EAAM4C,WAAWC,SAAS,gBAG9B,kBAACN,EAAA,EAAD,CACEC,KAAM,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACJ,kBAAC,IAAD,CAAMR,KAAK,WAAWO,MAAOA,EAAOC,KAAMA,KAE5CC,MAAM,WACNtB,QAAS,WACPhB,WAwBR0B,EAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,GAERqB,QAAS,CACPhB,MAAO,GACPiC,OAAQ,GACRC,aAAc,GACdC,YAAa,EACbC,YAAa,QAEflB,KAAM,CACJO,MAAO,QACPY,SAAU,GACVC,WAAY,OAEdC,UAAW,CACTd,MAAO,QACPY,SAAU,GACVC,WAAY,MACZE,YAAa,K,qDClIF,SAASC,GAAT,GAAsC,IAAfb,EAAc,EAAdA,WAAc,EAC1BzC,mBAAS,IADiB,WAC3CuD,EAD2C,KACrCC,EADqC,OAEtBxD,mBAAS,IAFa,WAE3CyD,EAF2C,KAEnCC,EAFmC,OAGV1D,oBAAS,GAHC,WAG3C2D,EAH2C,KAG7BC,EAH6B,OAIZ5D,mBAAS,IAJG,WAI3C6D,EAJ2C,KAI9BC,EAJ8B,KA2DlD,OArDA1D,qBAAU,YAEc,uBAAA5C,EAAAC,OAAA,kEAAAD,EAAA,MACGE,IAAMqB,IAC3B,8CACA,CAEEgF,OAAQ,CACNC,EAAG,UACHC,IAjBO,0CAkBPC,QAAS,gBARK,gBACZrG,EADY,EACZA,KAYF0F,EAAO1F,EAAKsG,MAAMC,KAAKC,MAAMD,KAAKE,SAAWzG,EAAKsG,MAAMI,SAE9DT,EAAeP,GAfK,4DAkBtBiB,KAGC,CAACV,IA+BF,kBAACW,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAYnE,MAAOqB,GAAO+C,YACxB,kBAAC,KAAD,KACE,kBAACrE,EAAA,EAAD,CAAMC,MAAOqB,GAAOiB,WAClB,kBAAC5B,EAAA,EAAD,CACEV,MAAO,CAAEqE,WAAY,WAAYC,OAAQ,IACzC3D,QAASuB,EAAWqC,YAEpB,kBAAC,IAAD,CAAM/C,KAAK,OAAOQ,KAAM,GAAID,MAAM,aAEpC,kBAAChC,EAAA,EAAD,CAAMC,MAAOqB,GAAOmD,QAClB,kBAACpD,EAAA,EAAD,CACEhB,OAAQ,CACNC,IAAK,2CAEPL,MAAOqB,GAAOhE,QAEhB,kBAAC,IAAD,CAAM2C,MAAOqB,GAAOoD,SAApB,eACA,kBAAC1E,EAAA,EAAD,CAAMC,MAAOqB,GAAOqD,gBAElB,kBAACC,GAAA,EAAD,CACE3E,MAAOqB,GAAOuD,UAEdC,aApDhB,SAAsBC,GAEpB7B,EAAQ6B,OAqDE,kBAACpE,EAAA,EAAD,CACEV,MAAO,CAACqB,GAAOqD,eAAgBrD,GAAO0D,iBACtCpE,QApDd,WAEExD,IACGqB,IACC,iDACEwE,EADF,6DAQDgC,MAAK,SAAC1H,GAEL6F,EAAU7F,EAAKA,KAAKsG,OACpBrG,QAAQC,IAAI0F,MAEb+B,OAAM,SAACC,GACN3H,QAAQC,IAAI0H,MAGhB7B,GAAgB,KAiCJ,kBAAC,IAAD,CAAMrD,MAAOqB,GAAO8D,YAApB,WAID7B,EAAYpC,IACX,kBAACnB,EAAA,EAAD,KAIE,kBAAC,IAAD,CAAMC,MAAOqB,GAAO+D,WAApB,mBACA,kBAAC1E,EAAA,EAAD,CACEC,QAAS,WACPuB,EAAWC,SAAS,iBAAkBmB,KAGxC,kBAAClC,EAAA,EAAD,CACEiE,IAAK/B,EAAYgC,WAAWC,MAC5BnF,OAAQ,CACNC,IAAKiD,EAAYgC,WAAWE,WAAWC,WAEzCzF,MAAO,CAAEM,MAAO,IAAKiC,OAAQ,IAAK+B,OAAQ,aAOpD,kBAACvE,EAAA,EAAD,CAAMC,MAAOqB,GAAOqE,cAClB,kBAACC,GAAA,EAAD,CACEC,cAAc,QACdC,aAAa,EACbC,QAAS1C,GAET,kBAACc,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KAEE,kBAACpE,EAAA,EAAD,CAAMC,MAAOqB,GAAO0E,SAAU/F,MAAOqB,GAAOqE,cAEzCxC,EAAO8C,KAAI,SAAChD,EAAMiD,GAEjB,OACE,kBAAClG,EAAA,EAAD,CAAM2D,IAAKuC,GAGT,kBAACvF,EAAA,EAAD,CACEC,QAAS,WACP0C,GAAgB,GAChBnB,EAAWC,SAAS,iBAAkBa,KAGxC,kBAAC5B,EAAA,EAAD,CAEEiE,IAAKrC,EAAKsC,WAAWC,MACrBvF,MAAO,CAAEM,MAAO,IAAKiC,OAAQ,KAC7BnC,OAAQ,CACNC,IACE2C,EAAKsC,WAAWE,WAAWU,kBAKjC,kBAAC,IAAD,CAAMlG,MAAOqB,GAAO8E,UACjBnD,EAAKsC,WAAWC,OAEnB,kBAAC,IAAD,CAAMvF,MAAOqB,GAAO8E,UACjBnD,EAAKsC,WAAWc,SAEnB,kBAAC,IAAD,CAAMpG,MAAOqB,GAAO8E,UACjBnD,EAAKsC,WAAWe,qBAO7B,kBAAC3F,EAAA,EAAD,CACEV,MAAO,CACLqB,GAAOqD,eACPrD,GAAO0D,gBACP1D,GAAOiF,QAET3F,QAAS,kBAAM0C,GAAgB,KAE/B,kBAAC,IAAD,CAAMrD,MAAOqB,GAAO8D,YAApB,iBAoBtB,IAAM9D,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,GAERuE,OAAQ,CACNH,WAAY,SACZkC,eAAgB,UAElBnC,WAAY,CACVoC,iBAAkB,IAEpBnJ,MAAO,CACLoJ,UAAW,GACXjG,QAAS,EACTF,MAAO,IACPiC,OAAQ,IACRkE,UAAW,IAEbhC,QAAS,CACPH,OAAQ,EACR3B,SAAU,IAEZyC,UAAW,CACTd,OAAQ,EACR3B,SAAU,GACVlC,WAAY,GACZiG,YAAa,IAEf9B,UAAW,CACThC,WAAY,OACZ+D,aAAc,EACdC,WAAY,GACZtG,MAAO,QAEToE,eAAgB,CACd+B,UAAW,GACX/E,cAAe,MACfpB,MAAO,MACPiC,OAAQ,GACRC,aAAc,GACdC,YAAa,IAEb4B,WAAY,SACZ5D,WAAY,GAEdsE,gBAAiB,CACfV,WAAY,SACZkC,eAAgB,SAChBM,gBAAiB,WAEnB1B,WAAY,CACVpD,MAAO,QACPY,SAAU,GACVC,WAAY,OACZkE,UAAW,SACXC,OAAQ,GAIVrB,aAAc,CACZzF,KAAM,EACNsG,eAAgB,SAChBlC,WAAY,SACZoC,UAAW,IAEbO,UAAW,CACT1C,OAAQ,GACRuC,gBAAiB,QACjBrE,aAAc,EACdhC,QAAS,GACTyG,QAAS,EACT5C,WAAY,SACZ6C,cAAe,IACfC,aAAc,EACdC,UAAW,GAEbd,OAAQ,CACNM,WAAY,IAEdT,SAAU,CACRvD,WAAY,OACZ+D,aAAc,EACdrG,MAAO,U,mBCrRI,SAAS+G,GAAe/H,GAAQ,IAAD,EAChBG,mBAAS,aADO,WACrCoB,EADqC,KAC7ByG,EAD6B,KAE5CzH,qBAAU,YACU,qBAAA5C,EAAAC,OAAA,2EAAAD,EAAA,MAGSE,IAAMqB,IAAN,oCAEnBc,EAAMiI,MAAMvE,KAAO1D,EAAMiI,MAAMvE,KAAKwE,SAAWlI,EAAMiI,MAAM/D,OAAOtC,MALxD,gBAGN5D,EAHM,EAGNA,KAKRgK,EAAUhK,GARI,gHAWlBmK,KACC,CAACH,IACJ,IAAMI,EAAWpI,EAAMiI,MAAM/D,OAE7B,OACE,kBAACzD,EAAA,EAAD,CAAMC,MAAOqB,GAAOiB,WAClB,kBAAC4B,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACzD,EAAA,EAAD,CACEV,MAAO,CAAEqE,WAAY,WAAYC,OAAQ,IACzC3D,QAASrB,EAAM4C,WAAWqC,YAE1B,kBAAC,IAAD,CAAM/C,KAAK,OAAOQ,KAAM,GAAID,MAAM,aAEpC,kBAAChC,EAAA,EAAD,CAAMC,MAAOqB,GAAOmD,QAClB,kBAACpD,EAAA,EAAD,CACEpB,MAAO,CAAEM,MAAO,IAAKiC,OAAQ,KAC7B8C,IACEqC,EAASpC,WACLoC,EAASpC,WAAWC,MACpBmC,EAAS1E,KAAKuC,MAEpBnF,OAAQ,CACNC,IAAKqH,EAASpC,WACVoC,EAASpC,WAAWE,WAAWC,UAC/BiC,EAAS1E,KAAK3F,SAGtB,kBAAC,IAAD,CAAM2C,MAAOqB,GAAOsG,WACjBD,EAASpC,WACNoC,EAASpC,WAAWC,MACpBmC,EAAS1E,KAAKuC,OAEpB,kBAAC,IAAD,KACGmC,EAASpC,WACNoC,EAASpC,WAAWc,QACpBsB,EAAS1E,KAAKoD,SAEpB,kBAAC,IAAD,KACGsB,EAASpC,WACNoC,EAASpC,WAAWsC,YACpBF,EAAS1E,KAAK4E,cAGtB,kBAAC,IAAD,CAAM5H,MAAOqB,GAAOsG,WAApB,eACA,kBAAC,KAAD,CACEE,eAAgB,CAAEtF,OAAQ,IAC1BuF,aAAcjH,EACdkH,aAAc,SAACC,GAAD,OAAUV,EAAUU,EAAKC,QACvCrE,MAAO,CACL,CAAE3B,MAAO,YAAagG,MAAO,aAC7B,CAAEhG,MAAO,oBAAqBgG,MAAO,qBACrC,CAAEhG,MAAO,UAAWgG,MAAO,cAI/B,kBAACC,GAAA,EAAD,CACE3C,MAAM,mBACN5E,QAAS,WACPxD,IAAMgL,KAAK,kCAAmC,CAC5CtH,SACAmC,KAAM,CACJuC,MAAOmC,EAASpC,WACZoC,EAASpC,WAAWC,MACpBmC,EAAS1E,KAAKuC,MAClBlI,MAAOqK,EAASpC,WACZoC,EAASpC,WAAWE,WAAWC,UAC/BiC,EAAS1E,KAAK3F,MAClB+I,QAASsB,EAASpC,WACdoC,EAASpC,WAAWc,QACpBsB,EAAS1E,KAAKoD,QAClBgC,OAAQV,EAASpC,WACboC,EAASpC,WAAWe,cACpBqB,EAAS1E,KAAKoF,OAClBR,YAAaF,EAASpC,WAClBoC,EAASpC,WAAWsC,YACpBF,EAAS1E,KAAK4E,YAClBJ,SAAUlI,EAAMiI,MAAM/D,OAAOtC,SAKrC,kBAACgH,GAAA,EAAD,CACE3C,MAAM,wBACN5E,QAAS,WACPxD,IAAMkL,OAAN,6BAC+BvL,OAD/B,IACyC4K,EAASxG,UAchE,IAAMG,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,GAERuE,OAAQ,CACNH,WAAY,SACZkC,eAAgB,UAElBoB,UAAW,CACT/E,WAAY,OACZ0F,aAAc,SACdhI,MAAO,OACPwG,UAAW,Y,ojBClIMyB,G,kCACnB,WAAYjJ,GAAQ,IAAD,uBACjB,cAAMA,IAKRkJ,WAAa,oBAAAvL,EAAAC,OAAA,2EAAAD,EAAA,MAGHE,IAAMkL,OAAN,oCACgC,EAAK/I,MAAMX,KAD3C,eAC8D,EAAKW,MAAMnB,MAAM+C,KAJ5E,yBAAAjE,EAAA,MAOS,EAAKqC,MAAMmJ,aAPpB,8DASTlL,QAAQC,IAAR,MATS,iEANM,EAoBnBkL,SAAW,oBAAAzL,EAAAC,OAAA,2EAAAD,EAAA,MAGDE,IAAMgL,KAAN,oCACgC,EAAK7I,MAAMX,KAD3C,aAC4D,EAAKW,MAAMnB,MAAM+C,KAJ5E,OAOP,EAAK5B,MAAMmJ,YAPJ,+CASPlL,QAAQC,IAAR,MATO,gEAlBT,EAAKgL,WAAa,EAAKA,WAAWG,KAAhB,SAClB,EAAKD,SAAW,EAAKA,SAASC,KAAd,SAHC,E,mCAiCnB,WAAU,IAAD,SAEiCC,KAAKtJ,MAAtCnB,EAFA,EAEAA,MAAOgE,EAFP,EAEOA,SAAkBxD,GAFzB,EAEiBkC,OAFjB,EAEyBlC,MAE1BkK,EAAoBC,YAASC,QAAQ5K,EAAM6K,WAAWC,eAAeH,YAASI,aAC9EC,EAAkBL,YAASC,QAAQ5K,EAAMiL,SAASH,eAAeH,YAASI,aAC1EG,EAAgBP,YAASC,QAAQ5K,EAAMmL,MAAML,eAAeH,YAASS,WAE3E,OACI,kBAAC7I,EAAA,EAAD,CAAkBC,QAAS,kBAAMwB,EAASA,SAAS,kBAAmBhE,KAClE,kBAAC4B,EAAA,EAAD,CAAMC,MAAOqB,GAAOmI,cAAe9F,IAAKvF,EAAM+C,IAE1C,kBAACE,EAAA,EAAD,CACIhB,OAAQ,CACRC,IAAK,yJAELL,MAAOqB,GAAOhE,QAGlB,kBAAC0C,EAAA,EAAD,CAAMC,MAAOqB,GAAOoI,WAChB,kBAAC,IAAD,CAAMzJ,MAAOqB,GAAOqI,YAAavL,EAAMuL,YACvC,kBAAC,IAAD,CAAM1J,MAAOqB,GAAOiI,MAApB,SAAiCD,GACjC,kBAAC,IAAD,CAAMrJ,MAAOqB,GAAOsI,MAApB,eAAuCd,GACvC,kBAAC,IAAD,CAAM7I,MAAOqB,GAAOsI,MAApB,aAAqCR,GACrC,kBAAC,IAAD,CAAMnJ,MAAOqB,GAAOuG,aAApB,gBACczJ,EAAMyJ,aAKxB,kBAAC7H,EAAA,EAAD,CAAMC,MAAOqB,GAAOuI,yBACfjL,IAASR,EAAM0L,OAChB,kBAAC3B,GAAA,EAAD,CAEI3C,MAAO,cACP5E,QAAS,WACTwB,EAASA,SAAS,cAAehE,IAEjC4D,MAAM,QACN+H,mBAAmB,WAGvB,kBAAC5B,GAAA,EAAD,CAII3C,MAAOpH,EAAM4L,MAAM,GAAK,aAAe,WACvCpJ,QAAS,WACTxC,EAAM4L,MAAM,GAAK,EAAKvB,aAAe,EAAKE,YAE1C3G,MAAM,QACN+H,mBAAmB,mB,GArFF3K,IAAM6K,WAgGzC3I,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,GAERmE,WAAY,CACVoC,iBAAkB,IAEpBnJ,MAAO,CACLmD,QAAS,EACTF,MAAO,IACPiC,OAAQ,IACRkE,UAAW,GACXG,WAAY,IAEd8C,WAAY,CACV/G,SAAU,GACVgE,aAAc,EACd/D,WAAY,QAEd0G,KAAM,CACJ3G,SAAU,GACVgE,aAAc,GAEhBgD,KAAM,CACJhH,SAAU,GACVgE,aAAc,GAEhBiB,YAAa,CACXjF,SAAU,GACVgE,aAAc,GAEhB6C,cAAe,CACb9H,cAAe,MACfuI,YAAa,QACbvH,YAAa,QACbD,YAAa,EACbkE,aAAc,GACdF,UAAW,IAEbgD,UAAW,CACTjJ,QAAS,GACTF,MAAO,KAET4J,SAAU,CACRvH,SAAU,IAEZiH,wBAAyB,CACvB/C,gBAAiB,UACjBrE,aAAc,GACdhC,QAAS,GACTF,MAAO,IACPiC,OAAQ,GACRqE,WAAY,M,mbChJT,IAAMuD,GAAb,kCACE,WAAY7K,GAAQ,IAAD,uBACjB,cAAMA,IACDvB,MAAQ,CACX8C,OAAQ,WACR/D,OAAQ,GAJO,EADrB,8CASE,WAEE8L,KAAKtJ,MAAMmJ,UAAUG,KAAK7K,MAAMjB,UAXpC,oBAcE,WAAU,IAAD,OACP,OACE,kBAACoH,GAAA,EAAD,CAAclE,MAAOqB,GAAOiB,WAC1B,kBAAC6B,GAAA,EAAD,CAAYnE,MAAOqB,GAAO+C,YAExB,kBAAC1D,EAAA,EAAD,CACEV,MAAO,CAAEqE,WAAY,WAAYC,OAAQ,IACzC3D,QAASiI,KAAKtJ,MAAM4C,WAAWqC,YAE/B,kBAAC,IAAD,CAAM/C,KAAK,OAAOQ,KAAM,GAAID,MAAM,aAGpC,kBAAChC,EAAA,EAAD,CAAMC,MAAOqB,GAAO+I,uBAClB,kBAAClC,GAAA,EAAD,CACE3C,MAAM,eAEN5E,QAAS,WACP,EAAKrB,MAAM4C,WAAWC,SAAS,gBAEjCJ,MAAM,QACN+H,mBAAmB,kBAIvB,kBAAC,KAAD,CACI9J,MAAO,CAAC6G,gBAAiB,WACzBwD,UAAW,CAAC9D,eAAgB,cAC5B+D,cAAe,CAACzD,gBAAiB,WACjCgB,eAAgB,CAAEtF,OAAQ,IAC1BgI,iBAAkB,CAACxI,MAAO,OAC1B+F,aAAcc,KAAK7K,MAAM8C,OACzBkH,aAAc,SAAAC,GAAI,OAAI,EAAKwC,SAAS,CAClC3J,OAAQmH,EAAKC,SAEfrE,MAAO,CACL,CAAE3B,MAAO,kBAAmBgG,MAAO,YACnC,CAAEhG,MAAO,mBAAoBgG,MAAO,aACpC,CAAEhG,MAAO,iBAAkBgG,MAAO,cAIxC,kBAAClI,EAAA,EAAD,KACyB,4CAAtB6I,KAAKtJ,MAAM3B,OACV,kBAAC,IAAD,CAAMqC,MAAOqB,GAAO6I,UAApB,2CASEtB,KAAKtJ,MAAM3B,OAAO8M,QAAO,SAAAtM,GACvB,MAA6B,aAAtB,EAAKJ,MAAM8C,QACK,cAAtB,EAAK9C,MAAM8C,QAA0B1C,EAAM4L,MAAM,IAC3B,YAAtB,EAAKhM,MAAM8C,QAAwB,EAAK9C,MAAMjB,SAAWqB,EAAM0L,UAE/D7D,KAAI,SAAC7H,GAAD,OAEL,kBAAC,GAAD,CAAauF,IAAKvF,EAAM+C,GACtB/C,MAAOA,EACPQ,KAAM,EAAKZ,MAAMjB,OACjB+D,OAAQ,EAAK9C,MAAM8C,OACnBsB,SAAU,EAAK7C,MAAM4C,WACrBuG,UAAW,kBAAM,EAAKnJ,MAAMmJ,UAAU,EAAK1K,MAAMjB,qBA9ErE,GAA+BqC,IAAM6K,WAqGtBU,gBAZE,SAAC3M,GAChB,MAAO,CACLJ,OAAQI,EAAMJ,OAAOE,QAIL,SAACb,GACnB,MAAO,CACLyL,UAAW,SAAC3L,GAAD,OAAYE,ETpGA,SAACF,GAC1B,OAAO,SAAOE,GAAP,iBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEoBE,IAAMqB,IAAN,oCACe1B,IAHnC,gBAEKQ,EAFL,EAEKA,KAGRN,EAASU,EAAeJ,IALrB,gDAOHC,QAAQC,IAAI,qCAPT,iESmG2BmN,CAAY7N,QAIjC4N,CAA+BP,IAExC9I,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,GAERmE,WAAY,CACVoC,iBAAkB,IAEpBnJ,MAAO,CACLmD,QAAS,EACTF,MAAO,IACPiC,OAAQ,IACRkE,UAAW,GACXG,WAAY,IAEd8C,WAAY,CACV/G,SAAU,GACVgE,aAAc,EACd/D,WAAY,QAEd0G,KAAM,CACJ3G,SAAU,GACVgE,aAAc,GAEhBgD,KAAM,CACJhH,SAAU,GACVgE,aAAc,GAEhBiB,YAAa,CACXjF,SAAU,GACVgE,aAAc,GAEhByD,sBAAuB,CACrBvD,gBAAiB,UACjBF,aAAc,GACdnE,aAAc,GACdlC,MAAO,IACPiC,OAAQ,IAEViH,cAAe,CACb9H,cAAe,MACfuI,YAAa,QACbvH,YAAa,QACbD,YAAa,EACbkE,aAAc,GACdF,UAAW,IAEbgD,UAAW,CACTjJ,QAAS,GACTF,MAAO,KAET4J,SAAU,CACRvH,SAAU,IAEZiI,yBAA0B,CACxB/D,gBAAiB,UACjBrE,aAAc,GACdhC,QAAS,GACTF,MAAO,IACPiC,OAAQ,GACRqE,WAAY,M,ubCnKKiE,G,8HACnB,WAAU,IAAD,SAQHjC,KAAKtJ,MAAMiI,MAAM/D,OANnBkG,EAFK,EAELA,WACAJ,EAHK,EAGLA,KACA1B,EAJK,EAILA,YACAoB,EALK,EAKLA,UACAI,EANK,EAMLA,QAKIP,GAXC,EAOLgB,OAIyBf,YAASC,QAAQC,GAAWC,eACrDH,YAASI,cAELC,EAAmBL,YAASC,QAAQK,GAASH,eACjDH,YAASI,aAELG,EAAgBP,YAASC,QAAQO,GAAML,eAC3CH,YAASS,WAEX,OACE,kBAACrF,GAAA,EAAD,CAAclE,MAAOqB,GAAOiB,WAC1B,kBAAC6B,GAAA,EAAD,CAAYnE,MAAOqB,GAAO+C,YAExB,kBAAC1D,EAAA,EAAD,CACEV,MAAO,CAAEqE,WAAY,WAAYC,OAAQ,IACzC3D,QAASiI,KAAKtJ,MAAM4C,WAAWqC,YAE/B,kBAAC,IAAD,CAAM/C,KAAK,OAAOQ,KAAM,GAAID,MAAM,aAEpC,kBAAChC,EAAA,EAAD,CAAMC,MAAOqB,GAAOmI,eAElB,kBAACzJ,EAAA,EAAD,CAAMC,MAAOqB,GAAOoI,WAClB,kBAAC,IAAD,CAAMzJ,MAAOqB,GAAOqI,YAAaA,GACjC,kBAAC,IAAD,CAAM1J,MAAOqB,GAAOiI,MAApB,SAAiCD,GACjC,kBAAC,IAAD,CAAMrJ,MAAOqB,GAAO2H,WAApB,eACeH,GAEf,kBAAC,IAAD,CAAM7I,MAAOqB,GAAO+H,SAApB,aAAwCD,GACxC,kBAAC,IAAD,CAAMnJ,MAAOqB,GAAOuG,aAAcA,IAGpC,kBAACxG,EAAA,EAAD,CACEhB,OAAQ,CACNC,IACE,yJAEJL,MAAOqB,GAAOhE,SAGlB,kBAAC,IAAD,2EAGA,kBAAC6K,GAAA,EAAD,CACE3C,MAAO,WACPvF,MAAOqB,GAAOyJ,QACdnK,QAAS,WACP,EAAKrB,MAAM4C,WAAWC,SAAS,OAAQ,CAAEoD,MAAOmE,KAElD3H,MAAM,UACN+H,mBAAmB,mB,GA7Dc3K,IAAM6K,WAqE7C3I,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,GAERmE,WAAY,CACVoC,iBAAkB,IAEpBnJ,MAAO,CACLmD,QAAS,EACTF,MAAO,IACPiC,OAAQ,IACRkE,UAAW,GACXG,WAAY,GAEd8C,WAAY,CACV/G,SAAU,GACVgE,aAAc,EACd/D,WAAY,QAEd0G,KAAM,CACJ3G,SAAU,GACVgE,aAAc,GAEhBqC,UAAW,CACTrG,SAAU,GACVgE,aAAc,GAEhByC,QAAS,CACPzG,SAAU,GACVgE,aAAc,GAEhBiB,YAAa,CACXjF,SAAU,GACVgE,aAAc,GAEhB6C,cAAe,CACb9H,cAAe,MACfiF,aAAc,GACdF,UAAW,IAEbgD,UAAW,CACTjJ,QAAS,GACTF,MAAO,KAETwK,QAAS,CACPjE,gBAAiB,UACjBrE,aAAc,GACdhC,QAAS,GACTF,MAAO,IACPiC,OAAQ,IACRqE,WAAY,M,kiCC9GDmE,GAAUC,KAAWxM,IAAI,UAAhC8B,MAEF2K,G,kCACJ,WAAY3L,GAAQ,IAAD,uBACjB,cAAMA,IACDvB,MAAQ,CACX2L,WAAY,EAAKpK,MAAMnB,MAAM+C,GAAK,EAAK5B,MAAMnB,MAAMuL,WAAa,GAEhEwB,UAAW,EAAK5L,MAAMnB,MAAM+C,GAAK,EAAK5B,MAAMnB,MAAMmL,KAAO,IAAI6B,KAC7DC,QAAS,EAAK9L,MAAMnB,MAAM+C,GAAK,EAAK5B,MAAMnB,MAAMmL,KAAO,IAAI6B,KAE3DvD,YAAa,EAAKtI,MAAMnB,MAAM+C,GAAK,EAAK5B,MAAMnB,MAAMyJ,YAAc,GAClEiC,OAAQ,EAAKvK,MAAMX,KAAKuC,GAAK,EAAK5B,MAAMX,KAAKuC,GAAK,GAEpD,EAAKmK,aAAa1C,KAAlB,SACA,EAAK2C,aAAa3C,KAAlB,SACA,EAAK4C,aAAa5C,KAAlB,SAbiB,E,+CAgBnB,SAAmB6C,IACZA,EAAUrN,MAAM+C,IAAM0H,KAAKtJ,MAAMnB,MAAM+C,IAC1C0H,KAAK4B,SAAS,CACZd,WAAYd,KAAKtJ,MAAMnB,MAAMuL,WAC7BJ,KAAMV,KAAKtJ,MAAMnB,MAAMuL,WACvBC,KAAMf,KAAKtJ,MAAMnB,MAAMuL,WACvB9B,YAAagB,KAAKtJ,MAAMnB,MAAMuL,WAC9B+B,KAAM7C,KAAKtJ,MAAMX,KAAKuC,O,0BAI5B,0BAAAjE,EAAAC,OAAA,mDAEMwO,EAAU9C,KAAKtJ,MAAMnB,MAAM+C,GAFjC,UAIIwK,EAJJ,kCAAAzO,EAAA,MAKc2L,KAAKtJ,MAAMqM,OAAOF,KAAlB,MAA6B7C,KAAK7K,OAAS2N,IALzD,+CAAAzO,EAAA,MAMc2L,KAAKtJ,MAAM+C,OAAX,SACDuG,KAAK7K,OADJ,IAEJuL,KAAMV,KAAK7K,MAAMmN,UACjBlC,UAAWJ,KAAK7K,MAAMmN,UAAUU,mBAAmB,KAAM,CACvDC,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAEV3C,QAASR,KAAK7K,MAAMqN,QAAQQ,mBAAmB,KAAM,CACnDC,KAAM,UACNC,OAAQ,UACRC,QAAQ,QAjBpB,OAoBInD,KAAKtJ,MAAM4C,WAAWC,SAAS,aApBnC,kDAsBI5E,QAAQC,IAAR,MACAwO,KAAMlL,MAAM,QAAS,mCAvBzB,mE,0BA8BA,WACE,IAAI4K,EAAU9C,KAAKtJ,MAAMnB,MAAM+C,GAC/B0H,KAAKtJ,MAAM+I,OAAOoD,KAAMC,GACxB9C,KAAKtJ,MAAM4C,WAAWC,SAAS,e,0BAGjC,WACEyG,KAAKtJ,MAAM4C,WAAWC,SAAS,e,oBAGjC,WAAU,IAAD,OACP,OACE,kBAAC+B,GAAA,EAAD,CAAclE,MAAOqB,GAAOiB,WAC1B,kBAACvC,EAAA,EAAD,CAAMC,MAAOqB,GAAO4K,QAClB,kBAACvL,EAAA,EAAD,CACEV,MAAOqB,GAAO4K,OACdjM,MAAO,CAAEqE,WAAY,WAAYC,OAAQ,IACzC3D,QAASiI,KAAKtJ,MAAM4C,WAAWqC,YAE/B,kBAAC,IAAD,CAAM/C,KAAK,OAAOQ,KAAM,GAAID,MAAM,cAGtC,kBAAC,IAAD,CAAM/B,MAAOqB,GAAOoD,SACjBmE,KAAKtJ,MAAMnB,MAAM+C,GAAK,eAAiB,gBAE1C,kBAACnB,EAAA,EAAD,CAAMC,MAAOqB,GAAOqD,gBAElB,kBAACC,GAAA,EAAD,CACE3E,MAAOqB,GAAO6K,MACdC,YAAa,QACbtH,aAAc,SAAC6E,GACb,EAAKc,SAAS,CAAEd,kBAGpB,kBAAC,KAAD,CACEzB,MAAOW,KAAK7K,MAAMmN,UAClBkB,KAAK,OACLC,QAAQ,UACRC,SAAU,SAACnO,EAAOoO,GAAR,OACR,EAAK/B,SAAS,CACZU,UAAWqB,EACXnB,QAASmB,OAYf,kBAAC,KAAD,CACEtE,MAAOW,KAAK7K,MAAMmN,UAClBkB,KAAK,OACLC,QAAQ,UACRC,SAAU,SAACnO,EAAOqO,GAAR,OACR,EAAKhC,SAAS,CACZU,UAAWsB,OAIjB,kBAAC,KAAD,CACEvE,MAAOW,KAAK7K,MAAMqN,QAClBgB,KAAK,OACLC,QAAQ,UACRC,SAAU,SAACnO,EAAOqO,GAAR,OACR,EAAKhC,SAAS,CACZY,QAASoB,OAcf,kBAAC7H,GAAA,EAAD,CACE3E,MAAO,CAACqB,GAAO6K,MAAOtE,IACtBuE,YAAa,cACbtH,aAAc,SAAC+C,GACb,EAAK4C,SAAS,CAAE5C,mBAIpB,kBAAC6E,GAAA,EAAD,CACEzM,MAAOqB,GAAOiF,OACd3F,QAAS,kBAAM,EAAK0K,iBAEpB,kBAAC,IAAD,CAAMrL,MAAOqB,GAAO8D,YAApB,WAGDyD,KAAKtJ,MAAMnB,MAAM+C,GAChB,kBAACgH,GAAA,EAAD,CAAQ3C,MAAM,eAAemH,QAAS,kBAAM,EAAKpB,kBAEjD,kBAACpD,GAAA,EAAD,CAAQ3C,MAAM,UAAU5E,QAAS,kBAAM,EAAK4K,wB,GA/J9BvB,aAuKpBpC,GAAc,CAAErF,OAAQ,KAExBlB,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,EACNoE,WAAY,SACZkC,eAAgB,gBAElB7B,eAAgB,GAGhBD,QAAS,CACP9B,SAAU,IAEZuJ,MAAO,CACL5L,MAAOyK,GAAQ,GACfxI,OAAQ,GACRkE,UAAW,GACXI,gBAAiB,UACjBrE,aAAc,GACdC,YAAa,KAEf6D,OAAQ,CACNjC,WAAY,SACZwC,gBAAiB,UACjBrG,QAAS,GACTgC,aAAc,GACdiE,UAAW,GACXhE,YAAa,KAEf0C,WAAY,CACVpD,MAAO,QACPY,SAAU,GACVC,WAAY,OACZkE,UAAW,SACXC,OAAQ,GAEVkF,OAAQ,CACNvF,YAAa,OAkBFgE,gBAfE,SAAC3M,GAChB,MAAO,CACLI,MAAOJ,EAAMI,MACbQ,KAAMZ,EAAMY,SAII,SAAC3B,GACnB,MAAO,CACLqF,OAAQ,SAACsK,GAAD,OAAkB3P,EV/ML,SAAC2P,GAAD,OAAkB,SAAO3P,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEhBE,IAAMgL,KAAN,+CAErBwE,IAJqC,OAEjCzO,EAFiC,OAMvClB,EAASiB,EAAaC,EAASZ,OANQ,4HU+MJsP,CAAUD,KAC7ChB,OAAQ,SAAC7O,EAAQ+P,EAAYnB,GAArB,OACN1O,EVnMqB,SAACF,EAAQ+P,EAAYnB,GAArB,OAAiC,SAC1D1O,GAD0D,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAIjCE,IAAMgL,KAAN,oCACerL,EADf,gBACqC4O,EAC1DmB,IANsD,OAIlD3O,EAJkD,OAQxDlB,EAzCoC,CACtCY,KAbmB,eAcnBkP,aAuCwB5O,EAASZ,OARyB,4HUmM7CyP,CAAYjQ,EAAQ+P,EAAYnB,KAC3CrD,OAAQ,SAACvL,EAAQ4O,GAAT,OAAqB1O,QAASgQ,GAAalQ,EAAQ4O,QAGhDhB,CAA+BO,I,SC1O/BF,GAAUC,KAAWxM,IAAI,UAAhC8B,MAqJFe,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,EACNQ,WAAYwM,KAAUC,cACtB7I,WAAY,SACZkC,eAAgB,UAElB9B,QAAS,CACP9B,SAAU,GACV2B,OAAQ,GAEV6I,QAAS,CACP1G,UAAW,GACX/E,cAAe,MACfpB,MAAO,MACPiC,OAAQ,GACRC,aAAc,GACdC,YAAa,IACb4B,WAAY,SACZ5D,WAAY,GAEdsF,SAAU,CACRrE,cAAe,OAEjB0L,KAAM,CACJzK,SAAU,IAEZ0K,SAAU,GACVjJ,WAAY,CACVyC,gBAAiB,UACjBL,iBAAkB,EAClBlG,MAAOyK,GAAQ,MAcJL,gBAVE,SAAC3M,GAAD,MAAY,CAC3BO,MAAOP,EAAMW,YACb5B,OAAQiB,EAAMY,KAAKuC,OAGD,SAAClE,GAAD,MAAe,CAEjCuB,SAAU,SAACzB,GAAD,OAAYE,EAASuB,EAASzB,QAG3B4N,EAhMK,SAACpL,GACnB/B,QAAQC,IAAI,gBAAc8B,EAAMiI,MAAM/D,OAAO1G,QAI7C,IAAIoE,EAAK5B,EAAMxC,QAAU,EACrBwQ,EAAUhO,EAAMhB,OAAS,GANA,EAQHmB,mBAAS6N,GARN,WAQtBhP,EARsB,KAgBvBtB,GAhBuB,KAgBZwC,eAEjBK,qBAAU,WACR7C,EAASuB,EAAS2C,MACjB,CAAC5C,IAGJ,IAAIiP,EAAeD,EAAQ7C,QACzB,SAACzH,GAAD,MAA0B,sBAAhBA,EAAKnC,UAEb2M,EAAaF,EAAQ7C,QAAO,SAACzH,GAAD,MAA0B,YAAhBA,EAAKnC,UAC3C4M,EAAYH,EAAQ7C,QAAO,SAACzH,GAAD,MAA0B,cAAhBA,EAAKnC,UAE9C,OACE,kBAACqD,GAAA,EAAD,CAAclE,MAAOqB,GAAOiB,WAC1B,kBAAC6B,GAAA,EAAD,CAAYnE,MAAOqB,GAAO+C,YACxB,kBAACrE,EAAA,EAAD,CAAMC,MAAOqB,GAAO4K,QAClB,kBAACvL,EAAA,EAAD,CACEV,MAAOqB,GAAO4K,OACdjM,MAAO,CAAEqE,WAAY,WAAYC,OAAQ,IACzC3D,QAASrB,EAAM4C,WAAWqC,YAE1B,kBAAC,IAAD,CAAM/C,KAAK,OAAOQ,KAAM,GAAID,MAAM,cAItC,kBAAChC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAOqB,GAAOoD,SAApB,iBAMF,kBAAC1E,EAAA,EAAD,KACE,kBAAC,IAAD,KAAOT,EAAM4B,IACb,kBAAC,IAAD,CAAMlB,MAAOqB,GAAO+L,MAApB,qBACA,kBAACjJ,GAAA,EAAD,CAAYuJ,YAAY,GACtB,kBAAC3N,EAAA,EAAD,CAAMC,MAAOqB,GAAO0E,UACjBwH,EAAavJ,OAAS,EACrBuJ,EAAavH,KAAI,SAAChD,EAAMiD,GAAP,OACf,kBAACvF,EAAA,EAAD,CACEgD,IAAKuC,EACLtF,QAAS,WACPrB,EAAM4C,WAAWC,SAAS,iBAAkBa,KAG9C,kBAACjD,EAAA,EAAD,CAAMC,MAAOqB,GAAOgM,UAClB,kBAACjM,EAAA,EAAD,CACEiE,IAAKrC,EAAKA,KAAKuC,MACfvF,MAAO,CAAEM,MAAO,IAAKiC,OAAQ,KAC7BnC,OAAQ,CACNC,IAAK2C,EAAKA,KAAK3F,SAGnB,kBAAC,IAAD,KAAO2F,EAAKA,KAAKuC,YAKvB,kBAAC,IAAD,oBAMR,kBAACxF,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAOqB,GAAO+L,MAApB,WACA,kBAACjJ,GAAA,EAAD,CAAYuJ,YAAY,GACtB,kBAAC3N,EAAA,EAAD,CAAMC,MAAOqB,GAAO0E,UACjByH,EAAWxJ,OAAS,EACnBwJ,EAAWxH,KAAI,SAAChD,EAAMiD,GAAP,OACb,kBAACvF,EAAA,EAAD,CACEgD,IAAKuC,EACLtF,QAAS,WACPrB,EAAM4C,WAAWC,SAAS,iBAAkBa,KAG9C,kBAACjD,EAAA,EAAD,CAAMC,MAAOqB,GAAOgM,UAClB,kBAACjM,EAAA,EAAD,CACEiE,IAAKrC,EAAKA,KAAKuC,MACfvF,MAAO,CAAEM,MAAO,IAAKiC,OAAQ,KAC7BnC,OAAQ,CACNC,IAAK2C,EAAKA,KAAK3F,SAGnB,kBAAC,IAAD,KAAO2F,EAAKA,KAAKuC,YAKvB,kBAAC,IAAD,oBAMR,kBAACxF,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAOqB,GAAO+L,MAApB,aACA,kBAACjJ,GAAA,EAAD,CAAYuJ,YAAY,GACtB,kBAAC3N,EAAA,EAAD,CAAMC,MAAOqB,GAAO0E,UACjB0H,EAAUzJ,OAAS,EAClByJ,EAAUzH,KAAI,SAAChD,EAAMiD,GAAP,OACZ,kBAACvF,EAAA,EAAD,CACEgD,IAAKuC,EACLtF,QAAS,WACPrB,EAAM4C,WAAWC,SAAS,iBAAkBa,KAG9C,kBAACjD,EAAA,EAAD,CAAMC,MAAOqB,GAAOgM,UAClB,kBAACjM,EAAA,EAAD,CACEiE,IAAKrC,EAAKA,KAAKuC,MACfvF,MAAO,CAAEM,MAAO,IAAKiC,OAAQ,KAC7BnC,OAAQ,CACNC,IAAK2C,EAAKA,KAAK3F,SAGnB,kBAAC,IAAD,KAAO2F,EAAKA,KAAKuC,YAKvB,kBAAC,IAAD,yB,UC/FDoI,GAxDF,WAAO,IAAD,EACelO,mBAAS,IADxB,WACVmO,EADU,KACAC,EADA,KAEjBhO,qBAAU,WACRgO,EAAY,CACV,CACEC,IAAK,EACLV,KAAM,kBACNW,UAAW,IAAI5C,KACfxM,KAAM,CACJmP,IAAK,EACLtM,KAAM,eACNwM,OAAQ,yCAIb,IAEH,IAAMC,EAASC,uBAAY,WAAoB,IAAnBN,EAAkB,uDAAP,GACrCC,GAAY,SAACM,GAAD,OACVC,KAAWC,OAAOF,EAAkBP,QAErC,IAqBH,OACE,kBAAC,KAAD,CACEA,SAAUA,EACVK,OAAQ,SAACL,GAAD,OAAcK,EAAOL,IAC7BjP,KAAM,CACJmP,IAAK,GAEPQ,aAzBiB,SAAChP,GACpB,OACE,kBAAC,KAAD,OACMA,EADN,CAEEiP,aAAc,CACZC,MAAO,CACL3H,gBAAiB,YAGrB4H,UAAW,CACTD,MAAO,CACLzM,MAAO,aAeb2M,gBAAc,EACdC,gBAAc,K,IAOLvM,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,EACNoE,WAAY,SACZkC,eAAgB,Y,QCkFdlF,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,EACNoE,WAAY,SACZkC,eAAgB,UAElBlJ,MAAO,CACLiD,MAAO,IACPiC,OAAQ,IACRkE,UAAW,KAEbhC,QAAS,CACP9B,SAAU,IAEZb,KAAM,CACJ8M,IAAK,EACLC,KAAM,GACNC,SAAU,YAGZpK,eAAgB,CACd+B,UAAW,GACX/E,cAAe,MACfpB,MAAO,MACPiC,OAAQ,GACRC,aAAc,GACdC,YAAa,EACbhC,WAAY,GAEdmE,UAAW,CACThC,WAAY,OACZgE,WAAY,GACZtG,MAAO,OAETyE,gBAAiB,CACfV,WAAY,SACZkC,eAAgB,SAChBM,gBAAiB,WAEnB1B,WAAY,CACVpD,MAAO,QACPY,SAAU,GACVC,WAAY,OACZkE,UAAW,SACXC,OAAQ,GAEVgI,aAAc,CACZrN,cAAe,MACfsN,eAAgB,EAChB3K,WAAY,SACZkC,eAAgB,UAElB0I,OAAQ,CACNH,SAAU,WACVF,IAAK,GACLJ,MAAO,MAIIU,GA9LD,SAAC5P,GAAW,IAAD,EACcH,IAAMM,UAAS,GAD7B,WAChB0P,EADgB,KACCC,EADD,KAGfC,EAAUlQ,IAAMS,WAAWV,GAA3BmQ,MAEFC,EAAwB,WAC5BF,GAAWD,IAQb,OACE,kBAAChL,GAAA,EAAD,KACE,kBAAC,KAAD,CACEoL,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAAOC,GAAP,eAAA1S,EAAAC,OAAA,mDAEa,KAAjByS,EAAOH,OAAoC,KAApBG,EAAOF,SAF1B,gBAGNzD,KAAMlL,MAAM,QAAS,6CAHf,kDAAA7D,EAAA,MAOYE,IAAMgL,KAAK,oCAAqC,CAC9DqH,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,YATf,OAOAG,EAPA,OAXKjR,EAuBG,CAAEA,KAAMiR,EAAItS,MAtBlC+R,EAAM1Q,GAUQ,kDAeJqN,KAAMlL,MACJ,QACA,qDAjBE,kCAXI,IAACnC,IAWL,+BAuBT,SAACW,GAAD,OACC,kBAACS,EAAA,EAAD,CAAMC,MAAOqB,GAAOiB,WAElB,kBAAClB,EAAA,EAAD,CACEhB,OAAQ,CACNC,IAAK,mDAEPwP,WAAW,SACX7P,MAAOqB,GAAOhE,QAEhB,kBAAC,IAAD,CAAM2C,MAAOqB,GAAOoD,SAApB,SACA,kBAAC,IAAD,+BAGA,kBAAC1E,EAAA,EAAD,CAAMC,MAAOqB,GAAOqD,gBAClB,kBAAC,IAAD,CACElD,KAAM,WACNQ,KAAM,GACND,MAAO,OACP/B,MAAOqB,GAAOS,OAEhB,kBAAC6C,GAAA,EAAD,CACE3E,MAAOqB,GAAOuD,UACduH,YAAa,gBACb2D,aAAa,gBACbC,eAAe,OACfC,aAAa,EACbnL,aAAcvF,EAAM2Q,aAAa,SACjChI,MAAO3I,EAAMqQ,OAAOH,SAKxB,kBAACzP,EAAA,EAAD,CAAMC,MAAOqB,GAAOqD,gBAClB,kBAAC,IAAD,CACElD,KAAM,OACNQ,KAAM,GACND,MAAO,OACP/B,MAAOqB,GAAOS,OAEhB,kBAAC6C,GAAA,EAAD,CACE3E,MAAOqB,GAAOuD,UACduK,kBAAiBA,EACjBhD,YAAa,WACb+D,cAAc,KACdrL,aAAcvF,EAAM2Q,aAAa,YACjChI,MAAO3I,EAAMqQ,OAAOF,WAGtB,kBAAC/O,EAAA,EAAD,CACEV,MAAOqB,GAAO4N,OACdtO,QAAS2O,GAET,kBAAC,IAAD,CACE9N,KAAM2N,EAAkB,YAAc,MACtCnN,KAAM,GACND,MAAO,WAMb,kBAACrB,EAAA,EAAD,CACEV,MAAO,CAACqB,GAAOqD,eAAgBrD,GAAO0D,iBACtCpE,QAASrB,EAAM+L,cAEf,kBAAC,IAAD,CAAMrL,MAAOqB,GAAO8D,YAApB,cAMR,kBAACpF,EAAA,EAAD,CAAMC,MAAOqB,GAAO0N,cAClB,kBAAC,IAAD,+BACA,kBAAC,IAAD,CACE/O,MAAO,CAAC,CAAE+B,MAAO,QAAU,CAAE6E,WAAY,IACzCjG,QAAS,kBACPrB,EAAM4C,WAAWC,SAAS,SAAU,CAAEgO,UAAU,MAHpD,e,+kBCrHR,IAsPM9O,GAASe,IAAWC,OAAO,CAC/BC,UAAW,CACTrC,KAAM,EACNoE,WAAY,SACZkC,eAAgB,UAElBlJ,MAAO,CACLmD,QAAS,EACTF,MAAO,IACPiC,OAAQ,IACRkE,UAAW,IAEbhC,QAAS,CACPH,OAAQ,EACR3B,SAAU,IAEZnB,KAAM,CACJ6K,QAAS,OACT3K,cAAe,OAEjB0O,SAAU,CACRxN,WAAY,OACZgE,WAAY,GACZH,UAAW,EACXnG,MAAO,OAEToE,eAAgB,CACd+B,UAAW,GACX/E,cAAe,MACfpB,MAAO,MACPiC,OAAQ,GACRC,aAAc,GACdC,YAAa,IAEb4B,WAAY,SACZ5D,WAAY,GAEd4P,cAAe,CACb5J,UAAW,GACX3D,YAAa,EACbxC,MAAO,IACPiC,OAAQ,GACRC,aAAc,GACdC,YAAa,KAEfX,KAAM,CACJ8M,IAAK,EACLC,KAAM,GACNC,SAAU,YAEZlK,UAAW,CACThC,WAAY,OACZ+D,aAAc,EACdC,WAAY,GACZtG,MAAO,OAETyE,gBAAiB,CACfV,WAAY,SACZkC,eAAgB,SAChBM,gBAAiB,WAEnB1B,WAAY,CACVpD,MAAO,QACPY,SAAU,GACVC,WAAY,OACZkE,UAAW,SACXC,OAAQ,GAEVgI,aAAc,CACZrN,cAAe,MACfsN,eAAgB,EAChB3K,WAAY,SACZkC,eAAgB,UAElB+J,SAAU,CACRvO,MAAO,UACPY,SAAU,GACVgE,cAAe,GAEjBsI,OAAQ,CACNH,SAAU,WACVF,IAAK,EACLJ,MAAO,MAiBI+B,GAzVA,SAACjR,GAAW,IACjBkR,EAAWrR,IAAMS,WAAWV,GAA5BsR,OADgB,EAGQrR,IAAMM,SAAS,CAC7CgR,cAAc,EACdC,aAAa,EACbC,iBAAiB,EACjBxB,iBAAiB,IAPK,WAGjByB,EAHiB,KAGPC,EAHO,KAsDlBvB,EAAwB,WAC5BuB,EAAY,SACPD,GADM,IAETzB,iBAAkByB,EAASzB,oBAS/B,OACE,kBAAChL,GAAA,EAAD,KACE,kBAAC,KAAD,CACEoL,cAAe,CACbC,MAAO,GACPC,SAAU,GACVqB,SAAU,GACVC,UAAW,GACXC,SAAU,IAEZtB,SAAU,SAAOC,GAAP,eAAA1S,EAAAC,OAAA,mDAEH0T,EAASF,aAAgBE,EAASD,gBAF/B,gBAGN3E,KAAMlL,MAAM,QAAS,0CAHf,kDAAA7D,EAAA,MAOYE,IAAMgL,KAAK,qCAAsC,CAC/DqH,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,SACjBqB,SAAUnB,EAAOmB,SACjBC,UAAWpB,EAAOoB,UAClBC,SAAUrB,EAAOqB,YAZf,OAOApB,EAPA,OAdKjR,EA6BG,CAAEA,KAAMiR,EAAItS,MA5BlCkT,EAAO7R,GAaO,kDAkBJmC,MAAM,EAAD,IAlBD,kCAdI,IAACnC,IAcL,+BAwBT,SAACW,GAAD,OACC,kBAACS,EAAA,EAAD,CAAMC,MAAOqB,GAAOiB,WAElB,kBAAClB,EAAA,EAAD,CACEhB,OAAQ,CACNC,IAAK,2CAEPL,MAAOqB,GAAOhE,QAEhB,kBAAC,IAAD,CAAM2C,MAAOqB,GAAOoD,SAApB,WACA,kBAAC,IAAD,2CAEA,kBAAC1E,EAAA,EAAD,CAAMC,MAAOqB,GAAOG,MAElB,kBAACzB,EAAA,EAAD,CAAMC,MAAOqB,GAAOgP,eAClB,kBAAC1L,GAAA,EAAD,CACE3E,MAAOqB,GAAO+O,SACdjE,YAAa,aACbtH,aAAcvF,EAAM2Q,aAAa,aACjChI,MAAO3I,EAAMqQ,OAAOoB,aAKxB,kBAAChR,EAAA,EAAD,CAAMC,MAAOqB,GAAOgP,eAClB,kBAAC1L,GAAA,EAAD,CACE3E,MAAOqB,GAAO+O,SACdjE,YAAa,YACbtH,aAAcvF,EAAM2Q,aAAa,YACjChI,MAAO3I,EAAMqQ,OAAOqB,aAM1B,kBAACjR,EAAA,EAAD,CAAMC,MAAOqB,GAAOqD,gBAClB,kBAAC,IAAD,CACElD,KAAM,WACNQ,KAAM,GACND,MAAO,OACP/B,MAAOqB,GAAOS,OAEhB,kBAAC6C,GAAA,EAAD,CACE3E,MAAOqB,GAAOuD,UACduH,YAAa,gBACb2D,aAAa,gBACbC,eAAe,OACfC,aAAa,EACbnL,aAAcvF,EAAM2Q,aAAa,SACjCgB,aAAc,SAACC,GAAD,OA/GPC,EA+G0BD,EAAEE,YAAYhE,UA7G7C,6BACJiE,KAAKF,GACbN,EAAY,SACPD,GADM,IAETH,cAAc,KAGhBI,EAAY,SACPD,GADM,IAETH,cAAc,MAXA,IAACU,GAgHPlJ,MAAO3I,EAAMqQ,OAAOH,SAGvBoB,EAASH,aAAe,KACvB,kBAAC,KAAD,CAAiBa,UAAU,SAASC,SAAU,KAC5C,kBAAC,IAAD,CAAMvR,MAAOqB,GAAOiP,UAApB,gCAKJ,kBAACvQ,EAAA,EAAD,CAAMC,MAAOqB,GAAOqD,gBAClB,kBAAC,IAAD,CACElD,KAAM,OACNQ,KAAM,GACND,MAAO,OACP/B,MAAOqB,GAAOS,OAEhB,kBAAC6C,GAAA,EAAD,CACE3E,MAAOqB,GAAOuD,UACduH,YAAa,WACb4D,eAAe,OACflL,aAAcvF,EAAM2Q,aAAa,YACjCgB,aAAc,SAACC,GAAsBA,EAAEE,YAAYhE,KAjKvDoE,OAAOxN,QAAU,EACvB6M,EAAY,SACPD,GADM,IAETF,aAAa,KAGfG,EAAY,SACPD,GADM,IAETF,aAAa,MA0JLzI,MAAO3I,EAAMqQ,OAAOmB,YAIvBF,EAASF,YAAc,KACtB,kBAAC,KAAD,CAAiBY,UAAU,SAASC,SAAU,KAC5C,kBAAC,IAAD,CAAMvR,MAAOqB,GAAOiP,UAApB,wCAOJ,kBAACvQ,EAAA,EAAD,CAAMC,MAAOqB,GAAOqD,gBAClB,kBAAC,IAAD,CACElD,KAAM,OACNQ,KAAM,GACND,MAAO,OACP/B,MAAOqB,GAAOS,OAEhB,kBAAC6C,GAAA,EAAD,CACE3E,MAAOqB,GAAOuD,UACduK,kBAAiByB,EAASzB,gBAC1BhD,YAAa,WACbtH,aAAcvF,EAAM2Q,aAAa,YACjCgB,aAAc,SAACC,GAA0BA,EAAEE,YAAYhE,KA7K3DoE,OAAOxN,QAAU,EACvB6M,EAAY,SACPD,GADM,IAETD,iBAAiB,KAGnBE,EAAY,SACPD,GADM,IAETD,iBAAiB,MAsKT1I,MAAO3I,EAAMqQ,OAAOF,WAGtB,kBAAC/O,EAAA,EAAD,CACEV,MAAOqB,GAAO4N,OACdtO,QAAS2O,GAET,kBAAC,IAAD,CACE9N,KAAMoP,EAASzB,gBAAkB,YAAc,MAC/CnN,KAAM,GACND,MAAO,WAKZ6O,EAASD,gBAAkB,KAC1B,kBAAC,KAAD,CAAiBW,UAAU,SAASC,SAAU,KAC5C,kBAAC,IAAD,CAAMvR,MAAOqB,GAAOiP,UAApB,wCAOJ,kBAAC5P,EAAA,EAAD,CACEV,MAAO,CAACqB,GAAOqD,eAAgBrD,GAAO0D,iBACtCpE,QAASrB,EAAM+L,cAEf,kBAAC,IAAD,CAAMrL,MAAOqB,GAAO8D,YAApB,gBAMR,kBAACpF,EAAA,EAAD,CAAMC,MAAOqB,GAAO0N,cAClB,kBAAC,IAAD,kCACA,kBAAC,IAAD,CACE/O,MAAO,CAAC,CAAE+B,MAAO,QAAU,CAAE6E,WAAY,IACzCjG,QAAS,kBAAMrB,EAAM4C,WAAWC,SAAS,WAF3C,aCvPFsP,GAAOC,eASEC,GAPQ,SAAC,GAAD,EAAGzP,WAAH,OACrB,kBAACuP,GAAKG,UAAN,CAAgBC,WAAW,OAAOC,iBAAiB,SACjD,kBAACL,GAAKM,OAAN,CAAavQ,KAAK,QAAQwQ,UAAW9C,KACrC,kBAACuC,GAAKM,OAAN,CAAavQ,KAAK,SAASwQ,UAAWzB,OCApC0B,GAAQP,eA6CCQ,GA3CQ,SAAC5S,GAAD,OACrB,gBAAC2S,GAAML,UAAP,KACE,gBAACK,GAAMF,OAAP,CACEvQ,KAAK,cACLwQ,UAAWjP,GACXoP,QAAS,CAAEC,aAAa,KAE1B,gBAACH,GAAMF,OAAP,CACEvQ,KAAK,iBACLwQ,UAAW3K,GACX8K,QAAS,CAAEC,aAAa,KAE1B,gBAACH,GAAMF,OAAP,CACEvQ,KAAK,YACLwQ,UAAW7H,GACXgI,QAAS,CAAEC,aAAa,KAE1B,gBAACH,GAAMF,OAAP,CACEvQ,KAAK,cACLwQ,UAAW/G,GACXkH,QAAS,CAAEC,aAAa,KAE1B,gBAACH,GAAMF,OAAP,CACEvQ,KAAK,kBACLwQ,UAAWnH,GACXsH,QAAS,CAAEC,aAAa,KAE1B,gBAACH,GAAMF,OAAP,CACEvQ,KAAK,cACLwQ,UAAWK,GACXF,QAAS,CAAEC,aAAa,KAE1B,gBAACH,GAAMF,OAAP,CACEvQ,KAAK,OACLwQ,UAAWrE,GACXwE,QAAS,kBAAgB,CACvB5M,MADO,EAAGgC,MACG/D,OAAO+B,MACpB+M,wBAAwB,Q,qkBC5BhC,IAAMC,GAASC,cA4KAC,GA1KO,WACpB,IAD0B,EAyCKtT,IAAMuT,YAjChB,SAACC,EAAW3U,GAC/B,OAAQA,EAAOJ,MACb,IAAK,YAOL,IAAK,QACH,OAAO,SACF+U,GADL,IAEE7V,OAAQkB,EAAOkD,GACfO,UAAWzD,EAAO4U,MAClBC,WAAW,IAEf,IAAK,SACH,OAAO,SACFF,GADL,IAEElR,UAAW,KACXoR,WAAW,IAEf,IAAK,SACH,OAAO,SACFF,GADL,IAEE7V,OAAQkB,EAAOkD,GACfO,UAAWzD,EAAO4U,MAClBC,WAAW,OAlCO,CACxBA,WAAW,EACX/V,OAAQ,KACR2E,UAAW,OAJa,WAyCnBqR,EAzCmB,KAyCP9V,EAzCO,KA6C1BO,QAAQC,IAAI,qBAAmBsV,GAG/B,IAAMC,EAAc5T,IAAM6T,SACxB,iBAAO,CACL3D,MAAO,SAAOO,GAAP,SAAA3S,EAAAC,OAAA,gEAGHuE,UAAYmO,EAAIjR,KAAKmS,SACrBhU,OAAS8S,EAAIjR,KAAKuC,GAAG+R,WAJlB,WAAAhW,EAAA,MAKGiW,IAAaC,QAAQ,YAAa1R,YALrC,yBAAAxE,EAAA,MAMGiW,IAAaC,QAAQ,SAAUrW,SANlC,uDAQHS,QAAQC,IAAR,MARG,QAULR,EAAS,CACPY,KAAM,QACNsD,GAAIpE,OACJ8V,MAAOnR,YAbJ,iEAgBP9B,OAAQ,oBAAA1C,EAAAC,OAAA,2EAAAD,EAAA,MAEEiW,IAAaE,WAAW,cAF1B,sDAIJ7V,QAAQC,IAAR,MAJI,OAMNR,EAAS,CAAEY,KAAM,WANX,gEAQR4S,OAAQ,SAAOZ,GAAP,SAAA3S,EAAAC,OAAA,gEAEJuE,UAAYmO,EAAIjR,KAAKmS,SACrBhU,OAAS8S,EAAIjR,KAAKuC,GAAG+R,WAHjB,WAAAhW,EAAA,MAIEiW,IAAaC,QAAQ,YAAa1R,YAJpC,yBAAAxE,EAAA,MAKEiW,IAAaC,QAAQ,SAAUrW,SALjC,uDAOJS,QAAQC,IAAR,MAPI,QASNR,EAAS,CACPY,KAAM,SACNsD,GAAIpE,OACJ8V,MAAOnR,YAZH,oEAgBV,IAyBF,OAtBA5B,qBAAU,WACRwT,YAAW,0BAAApW,EAAAC,OAAA,uDAELuE,EAAY,KAFP,oBAAAxE,EAAA,MAKQiW,IAAaI,QAAQ,WAL7B,cAKPxW,OALO,kBAAAG,EAAA,MAMWiW,IAAaI,QAAQ,cANhC,OAMP7R,EANO,yDAQPlE,QAAQC,IAAR,MARO,QAYTR,EAAS,CACPY,KAAM,YACNsD,GAAIpE,OACJ8V,MAAOnR,IAfA,mEAiBR,OACF,IAGCqR,EAAWD,UAEX,kBAAC9S,EAAA,EAAD,CAAMC,MAAO,CAAEC,KAAM,EAAGsG,eAAgB,SAAUlC,WAAY,WAC5D,kBAACkP,EAAA,EAAD,CAAmBvR,KAAK,WAQ5B,kBAAC,IAAD,CAAUlD,MAAOA,GACf,kBAACI,EAAYsU,SAAb,CAAsBvL,MAAO8K,GAC3B,kBAACU,EAAA,EAAD,KAC4B,OAAzBX,EAAWrR,UACV,kBAAC8Q,GAAOX,UAAR,CACE8B,cAAe,SAACpU,GAAD,OAAW,kBAAC,EAAD,OAAaA,EAAWwT,MAElD,kBAACP,GAAOR,OAAR,CAAevQ,KAAK,OAAOwQ,UAAWE,KACtC,kBAACK,GAAOR,OAAR,CAAevQ,KAAK,cAAcwQ,UAAWjP,KAC7C,kBAACwP,GAAOR,OAAR,CACEvQ,KAAK,iBACLwQ,UAAW3K,GACXsM,cAAe,CAAE7W,OAAQgW,EAAWhW,UAEtC,kBAACyV,GAAOR,OAAR,CACEvQ,KAAK,cACLwQ,UAAWK,GACXsB,cAAe,CAAE7W,OAAQgW,EAAWhW,UAEtC,kBAACyV,GAAOR,OAAR,CACEvQ,KAAK,YACLwQ,UAAW7H,GACXwJ,cAAe,CAAE7W,OAAQgW,EAAWhW,UAEtC,kBAACyV,GAAOR,OAAR,CACEvQ,KAAK,cACLwQ,UAAW/G,GACX0I,cAAe,CAAE7W,OAAQgW,EAAWhW,UAEtC,kBAACyV,GAAOR,OAAR,CACEvQ,KAAK,kBACLwQ,UAAWnH,GACX8I,cAAe,CAAE7W,OAAQgW,EAAWhW,WAIxC,kBAAC,GAAD,UC5KG8W,IARH,WACV,OACE,kBAAC,IAAD,CAAU9U,MAAOA,GACf,kBAAC,GAAD,S","file":"static/js/app.43513ed8.chunk.js","sourcesContent":["import axios from 'axios';\n\n// ACTION TYPES\nconst CHANGED_IMAGE = 'CHANGED_IMAGE';\nconst FETCHED_USER = 'FETCHED_USER';\n\n// ACTION CREATORS\nconst fetchedUser = (user) => ({\n  type: FETCHED_USER,\n  user,\n});\nconst changedImage = (image) => ({\n  type: CHANGED_IMAGE,\n  image,\n});\n\n// THUNK CREATORS\nexport const fetchUser = (userId) => {\n  return async (dispatch) => {\n    try {\n      console.log('FETCHING USER --->', userId);\n      const { data } = await axios.get(\n        `http://localhost:3000/api/users/${userId}/image`\n      );\n      console.log('DATA FROM USER --->', data);\n      dispatch(fetchedUser(data));\n    } catch (error) {\n      console.log('Error fetching user from server');\n    }\n  };\n};\n\nexport const changeImage = (userId, imageURL) => {\n  return async (dispatch) => {\n    try {\n      const { data } = await axios.put(\n        `http://localhost:3000/api/users/${userId}`,\n        {\n          image: imageURL,\n        }\n      );\n      console.log('CHANGED THE IMAGE -->', data);\n      // dispatch(changedImage(data));\n    } catch (error) {\n      console.log('Error saving image to server');\n    }\n  };\n};\n\n// INITIAL STATE\nconst initialState = [];\n\n// REDUCER\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case CHANGED_IMAGE:\n      return action.image;\n    case FETCHED_USER:\n      return action.user;\n    default:\n      return state;\n  }\n}\n","// ALL EVENTS SUB REDUCER\nimport axios from 'axios';\n\n// ACTION TYPES\nconst RECEIVED_EVENTS = 'RECEIVED_EVENTS';\n\n// ACTION CREATORS\nconst receivedEvents = (events) => ({\n  type: RECEIVED_EVENTS,\n  events,\n});\n\n// THUNK CREATORS\n\nexport const fetchEvents = (userId) => {\n  return async (dispatch) => {\n    try {\n      const { data } = await axios.get(\n        `http://localhost:3000/api/events/${userId}`\n      ); // this needs to be changed to reflect ngrok!!\n      dispatch(receivedEvents(data));\n    } catch (error) {\n      console.log('Error fetching events from server');\n    }\n  };\n};\n\n// INITIAL STATE\nconst initialState = {\n  all: [],\n};\n\n// REDUCER\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case RECEIVED_EVENTS:\n      return {\n        ...state,\n        all: action.events,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import axios from 'axios';\n\n//ACTION TYPE\nconst GET_EVENT = 'GET_EVENT';\n\nconst CREATE_EVENT = 'CREATE_EVENT';\nconst UPDATE_EVENT = 'UPDATE_EVENT';\n\n//ACTION CREATOR\nconst gotEvent = (singleEvent) => ({\n  type: GET_EVENT,\n  singleEvent,\n});\nconst createdEvent = (newEvent) => ({\n  type: CREATE_EVENT,\n  newEvent,\n});\n\nconst updatedEvent = (updatedEvent) => ({\n  type: UPDATE_EVENT,\n  updatedEvent,\n});\n\n//THUNK CREATOR\n//GET api/events/eventId\nexport const getSingleEvent = (eventId) => async (dispatch) => {\n  try {\n    const singleEvent = await axios.get(\n      `http://localhost:3000/api/events/${eventId}`\n    );\n    dispatch(gotEvent(singleEvent.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//POST api/events/createEvent\nexport const postEvent = (newEventInfo) => async (dispatch) => {\n  try {\n    const newEvent = await axios.post(\n      `http://localhost:3000/api/events/createEvent`,\n      newEventInfo\n    );\n    dispatch(createdEvent(newEvent.data));\n  } catch (error) {\n    throw error;\n  }\n};\n\n//PUT api/events/:userId/updateEvent/:eventId\n\nexport const updateEvent = (userId, editedInfo, eventId) => async (\n  dispatch\n) => {\n  try {\n    const newEvent = await axios.post(\n      `http://localhost:3000/api/events/${userId}/updateEvent/${eventId}`,\n      editedInfo\n    );\n    dispatch(updatedEvent(newEvent.data));\n  } catch (error) {\n    throw error;\n  }\n};\n\n// DELETE api/events/delete/eventId\nexport const deleteEvent = (userId, eventId) => async (dispatch) => {\n  try {\n    const deletedEvent = await axios.delete(\n      `http://localhost:3000/api/events/${userId}/delete/${eventId}`,\n      editedInfo\n    );\n    console.log('deleted event thunk', deletedEvent);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//INITIAL STATE\nconst initialState = [];\n\n//REDUCER\nconst event = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_EVENT:\n      return action.singleEvent;\n    default:\n      return state;\n  }\n};\n\nexport default event;\n","import axios from 'axios';\n\n//ACTION TYPE\nconst GET_USER_PROFILE = 'GET_USER_PROFILE';\nconst GET_BOOKS = 'GET_BOOKS';\n\n//ACTION CREATORS\nconst gotUserProfile = (user) => ({\n  type: GET_USER_PROFILE,\n  user,\n});\n\nconst gotBooks = (books) => ({\n  type: GET_BOOKS,\n  books,\n});\n\n//THUNK CREATORS\n//getting user information\nexport const getUserProfile = (userId) => async (dispatch) => {\n  try {\n    const user = await axios.get(`http://localhost:3000/api/users/${userId}`);\n    // console.log('user profile thunk', user.data);\n    dispatch(gotUserProfile(user.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getBooks = (userId) => async (dispatch) => {\n  try {\n    const books = await axios.get(`http://localhost:3000/api/users/${userId}`);\n    dispatch(gotBooks(books.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//INITIAL STATE\nconst initialState = [];\n\n//REDUCER\nconst userProfile = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_USER_PROFILE:\n      return action.user;\n    case GET_BOOKS:\n      return action.books;\n    default:\n      return state;\n  }\n};\n\nexport default userProfile;\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport user from './user';\nimport events from './events';\nimport event from './event';\nimport userProfile from './userProfile';\n\nconst rootReducer = combineReducers({\n  // ... the rest of your reducers\n  event,\n  events,\n  userProfile,\n  user,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nexport const AuthContext = React.createContext();\n","import React, { useEffect, useState } from 'react';\nimport {\n  View,\n  StyleSheet,\n  Image,\n  ImageBackground,\n  TouchableOpacity,\n} from 'react-native';\nimport { Text, Drawer } from 'react-native-paper';\nimport { DrawerContentScrollView, DrawerItem } from '@react-navigation/drawer';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport * as ImagePicker from 'expo-image-picker';\nimport { AuthContext } from './context';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { connect } from 'react-redux';\nimport { changeImage, fetchUser } from './store/user';\n\nconst Sidebar = (props) => {\n  // Set custom image state\n  const imageURL = useSelector((state) => state.user.image);\n  // I HAVE THE IMAGE, BUT IT'S NOT SETTING IT TO IMAGE ON LINE 25\n  console.log('IMAGE --->', imageURL);\n  const dispatch = useDispatch();\n  const [image, setImage] = useState(imageURL);\n  // const [image, setImage] = useState(props.imageURL);\n  const { logOut } = React.useContext(AuthContext);\n\n  // Update image\n  useEffect(() => {\n    dispatch(fetchUser(props.userId));\n  }, []);\n\n  // Allows user to custom pick an image from camera roll\n  const pickImage = async () => {\n    let { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== 'granted') {\n      alert('Sorry, we need camera roll permission to make this work!');\n      return;\n    } else {\n      const pickImage = await ImagePicker.launchImageLibraryAsync({\n        allowsEditing: true,\n      });\n      if (!pickImage.cancelled) {\n        setImage(pickImage.uri);\n        let id = Number(props.userId);\n        dispatch(changeImage(id, pickImage.uri));\n      }\n    }\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      <DrawerContentScrollView {...props}>\n        <ImageBackground\n          source={{\n            uri:\n              'https://png.pngtree.com/thumb_back/fw800/back_pic/04/00/88/6157ff435466669.jpg',\n          }}\n          style={{ width: undefined, padding: 20, paddingTop: 50 }}\n        >\n          <TouchableOpacity onPress={pickImage}>\n            <Image\n              source={{\n                uri: image,\n              }}\n              style={styles.profile}\n            />\n          </TouchableOpacity>\n          <Text style={styles.name}>{props.userToken}</Text>\n          <View style={{ flexDirection: 'row' }}></View>\n        </ImageBackground>\n        <Drawer.Section style={styles.drawerSection}>\n          <DrawerItem\n            icon={({ color, size }) => (\n              <Icon name=\"search\" color={color} size={size} />\n            )}\n            label=\"Find a Book\"\n            onPress={() => {\n              props.navigation.navigate('LandingPage');\n            }}\n          />\n          <DrawerItem\n            icon={({ color, size }) => (\n              <Icon name=\"book\" color={color} size={size} />\n            )}\n            label=\"My Bookshelf\"\n            onPress={() => {\n              props.navigation.navigate('UserProfile');\n            }}\n          />\n          <DrawerItem\n            icon={({ color, size }) => (\n              <Icon name=\"calendar\" color={color} size={size} />\n            )}\n            label=\"Events\"\n            onPress={() => {\n              props.navigation.navigate('AllEvents');\n            }}\n          />\n          <DrawerItem\n            icon={({ color, size }) => (\n              <Icon name=\"sign-out\" color={color} size={size} />\n            )}\n            label=\"Sign Out\"\n            onPress={() => {\n              logOut();\n            }}\n          />\n        </Drawer.Section>\n      </DrawerContentScrollView>\n    </View>\n  );\n};\n\n// const mapState = (state) => {\n//   return {\n//     image: state.image,\n//   };\n// };\n\n// const mapDispatch = (dispatch) => {\n//   return {\n//     changeImage: (userId, imageURL) => dispatch(changeImage(userId, imageURL)),\n//   };\n// };\n\nexport default Sidebar;\n// export default connect(mapState, mapDispatch)(Sidebar);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  profile: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    borderWidth: 3,\n    borderColor: '#FFF',\n  },\n  name: {\n    color: 'black',\n    fontSize: 20,\n    fontWeight: '800',\n  },\n  followers: {\n    color: 'black',\n    fontSize: 13,\n    fontWeight: '700',\n    marginRight: 4,\n  },\n});\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Text,\n  View,\n  StyleSheet,\n  TextInput,\n  Modal,\n  SafeAreaView,\n  ScrollView,\n  Image,\n  TouchableOpacity,\n} from \"react-native\";\nimport Icon from \"react-native-vector-icons/FontAwesome\";\nimport { Formik } from \"formik\";\n// import GOOGLE_API from \"../secrets\";\nimport axios from \"axios\";\n// import SingleBookView from \"./SingleBookView\";\nconst GOOGLE_API = \"AIzaSyCCv2Y7h0jPvMK1NF0y_nmI9V-4_lTXsWg\";\n\nexport default function LandingPage({ navigation }) {\n  const [book, setBook] = useState(\"\");\n  const [result, setResult] = useState([]);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [featureBook, setFeatureBook] = useState({});\n  //You can think of useEffect like componentDidMount\n  useEffect(() => {\n    //makes an axios call to fetch all books with query of \"book\" & ordered by newest published books\n    const getRandomBook = async () => {\n      const { data } = await axios.get(\n        \"https://www.googleapis.com/books/v1/volumes\",\n        {\n          //breaking up params can help with entering in different inputs for keys below and easier to see the params\n          params: {\n            q: \"puppies\",\n            key: GOOGLE_API,\n            orderBy: \"relevance\",\n          },\n        }\n      );\n      //book gives us a random book from data from the axios call\n      const book = data.items[Math.floor(Math.random() * data.items.length)];\n      //sets the chosen book into featureBook\n      setFeatureBook(book);\n    };\n    //invoke getRandomBook\n    getRandomBook();\n    //useEffect takes in 2nd argument - an array of dependencies\n    //dependencies are values defined outside of useEffect that are being used inside useEffect\n  }, [setFeatureBook]);\n\n  function handleChange(bookTitle) {\n    // Sets \"book\" state to the book title we typed in\n    setBook(bookTitle);\n  }\n\n  function handleSubmit() {\n    // Axios runs, passing in \"book\" & our Google Books API key\n    axios\n      .get(\n        \"https://www.googleapis.com/books/v1/volumes?q=\" +\n          book +\n          \"&key=\" +\n          \"AIzaSyCCv2Y7h0jPvMK1NF0y_nmI9V-4_lTXsWg\" +\n          // GOOGLE_API +\n          \"&maxResults=5\"\n      )\n      // Axios retrieves max list of 10 results\n      .then((data) => {\n        // We set array of book objects inside \"result\" state\n        setResult(data.data.items);\n        console.log(result);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    setModalVisible(true);\n  }\n  return (\n    <SafeAreaView>\n      <ScrollView style={styles.scrollView}>\n        <Formik>\n          <View style={styles.container}>\n            <TouchableOpacity\n              style={{ alignItems: \"flex-end\", margin: 16 }}\n              onPress={navigation.openDrawer}\n            >\n              <Icon name='bars' size={24} color='#161924' />\n            </TouchableOpacity>\n            <View style={styles.center}>\n              <Image\n                source={{\n                  uri: \"https://i.ibb.co/rpJ7vjb/signupbook.png\",\n                }}\n                style={styles.image}\n              />\n              <Text style={styles.heading}>Find a Book</Text>\n              <View style={styles.inputContainer}>\n                {/* <Icon name={\"search\"} size={30} color={\"grey\"} style={styles.icon} /> */}\n                <TextInput\n                  style={styles.inputText}\n                  // placeholder='Search by Title, Author, or Keyword'\n                  onChangeText={handleChange}\n                />\n              </View>\n              <TouchableOpacity\n                style={[styles.inputContainer, styles.submitContainer]}\n                onPress={handleSubmit}\n              >\n                <Text style={styles.submitText}>SUBMIT</Text>\n              </TouchableOpacity>\n              {/* <Button title='Submit' onPress={handleSubmit} /> */}\n              {/* featureBook will only show up once the component mounts */}\n              {featureBook.id && (\n                <View>\n                  {/* <Text style={{ textAlign: 'center', fontSize: 30 }}>\n              Hi, {navigation.state.params.user.firstName}!\n            </Text> */}\n                  <Text style={styles.published}>Newly Published</Text>\n                  <TouchableOpacity\n                    onPress={() => {\n                      navigation.navigate(\"SingleBookView\", featureBook);\n                    }}\n                  >\n                    <Image\n                      alt={featureBook.volumeInfo.title}\n                      source={{\n                        uri: featureBook.volumeInfo.imageLinks.thumbnail,\n                      }}\n                      style={{ width: 200, height: 300, margin: \"auto\" }}\n                    />\n                  </TouchableOpacity>\n                  {/* <Text>{featureBook.volumeInfo.description}</Text> */}\n                </View>\n              )}\n            </View>\n            <View style={styles.centeredView}>\n              <Modal\n                animationType='slide'\n                transparent={false}\n                visible={modalVisible}\n              >\n                <SafeAreaView>\n                  <ScrollView>\n                    {/* CSS on View to have books render left to right */}\n                    <View style={styles.bookList} style={styles.centeredView}>\n                      {/* Map over \"result\" state and render each book object details */}\n                      {result.map((book, idx) => {\n                        // console.log('book in map: ', book.volumeInfo);\n                        return (\n                          <View key={idx}>\n                            {/* Render book cover image first, with styling */}\n                            {/* <TouchableOpacity onPress={() => }> */}\n                            <TouchableOpacity\n                              onPress={() => {\n                                setModalVisible(false);\n                                navigation.navigate(\"SingleBookView\", book);\n                              }}\n                            >\n                              <Image\n                                // put react navigation here\n                                alt={book.volumeInfo.title}\n                                style={{ width: 100, height: 150 }}\n                                source={{\n                                  uri:\n                                    book.volumeInfo.imageLinks.smallThumbnail,\n                                }}\n                              />\n                              {/* </TouchableOpacity> */}\n                              {/* Render book title, authors array, rating */}\n                              <Text style={styles.bookInfo}>\n                                {book.volumeInfo.title}\n                              </Text>\n                              <Text style={styles.bookInfo}>\n                                {book.volumeInfo.authors}\n                              </Text>\n                              <Text style={styles.bookInfo}>\n                                {book.volumeInfo.averageRating}\n                              </Text>\n                            </TouchableOpacity>\n                          </View>\n                        );\n                      })}\n                    </View>\n                    <TouchableOpacity\n                      style={[\n                        styles.inputContainer,\n                        styles.submitContainer,\n                        styles.button,\n                      ]}\n                      onPress={() => setModalVisible(false)}\n                    >\n                      <Text style={styles.submitText}>DONE</Text>\n                    </TouchableOpacity>\n                    {/* <Button\n                  style={styles.published}\n                  title='DONE'\n                  onPress={() => setModalVisible(false)}\n                > */}\n                    {/* Done\n                </Button> */}\n                  </ScrollView>\n                </SafeAreaView>\n              </Modal>\n            </View>\n          </View>\n        </Formik>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  center: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  scrollView: {\n    marginHorizontal: 10,\n  },\n  image: {\n    marginTop: 40,\n    padding: 0,\n    width: 100,\n    height: 100,\n    marginTop: 50,\n  },\n  heading: {\n    margin: 0,\n    fontSize: 30,\n  },\n  published: {\n    margin: 0,\n    fontSize: 20,\n    paddingTop: 10,\n    paddingLeft: 25,\n  },\n  inputText: {\n    fontWeight: \"bold\",\n    marginBottom: 4,\n    marginLeft: 50,\n    width: \"100%\",\n  },\n  inputContainer: {\n    marginTop: 20,\n    flexDirection: \"row\",\n    width: \"80%\",\n    height: 35,\n    borderRadius: 50,\n    borderWidth: 1.5,\n    // justifyContent: 'center',\n    alignItems: \"center\",\n    paddingTop: 5,\n  },\n  submitContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#6475a5\",\n  },\n  submitText: {\n    color: \"white\",\n    fontSize: 15,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    bottom: 2,\n  },\n\n  //CSS for Modal\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 0,\n    padding: 35,\n    opacity: 0,\n    alignItems: \"center\",\n    shadowOpacity: 100,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  button: {\n    marginLeft: 35,\n  },\n  bookInfo: {\n    fontWeight: \"bold\",\n    marginBottom: 4,\n    width: \"100%\",\n  },\n});\n","import React, { useState, useEffect } from \"react\";\nimport DropDownPicker from \"react-native-dropdown-picker\";\nimport axios from \"axios\";\n\nimport {\n  Text,\n  Image,\n  SafeAreaView,\n  ScrollView,\n  Button,\n  View,\n  StyleSheet,\n  TouchableOpacity,\n} from \"react-native\";\n\nimport Icon from \"react-native-vector-icons/FontAwesome\";\n\nexport default function SingleBookView(props) {\n  const [status, setStatus] = useState(\"Completed\");\n  useEffect(() => {\n    const getStatus = async () => {\n      try {\n        // MADE URL DYNAMIC TO TAKE INTO ACCOUNT NAVIGATING FROM PROFILE TO SINGLEBOOKVIEW\n        const { data } = await axios.get(\n          `http://localhost:3000/api/books/${\n            props.route.book ? props.route.book.googleId : props.route.params.id\n          }`\n        );\n        setStatus(data);\n      } catch (err) {}\n    };\n    getStatus();\n  }, [setStatus]);\n  const bookPath = props.route.params;\n\n  return (\n    <View style={styles.container}>\n      <SafeAreaView>\n        <ScrollView>\n          <TouchableOpacity\n            style={{ alignItems: \"flex-end\", margin: 16 }}\n            onPress={props.navigation.openDrawer}\n          >\n            <Icon name='bars' size={24} color='#161924' />\n          </TouchableOpacity>\n          <View style={styles.center}>\n            <Image\n              style={{ width: 200, height: 300 }}\n              alt={\n                bookPath.volumeInfo\n                  ? bookPath.volumeInfo.title\n                  : bookPath.book.title\n              }\n              source={{\n                uri: bookPath.volumeInfo\n                  ? bookPath.volumeInfo.imageLinks.thumbnail\n                  : bookPath.book.image,\n              }}\n            />\n            <Text style={styles.textTitle}>\n              {bookPath.volumeInfo\n                ? bookPath.volumeInfo.title\n                : bookPath.book.title}\n            </Text>\n            <Text>\n              {bookPath.volumeInfo\n                ? bookPath.volumeInfo.authors\n                : bookPath.book.authors}\n            </Text>\n            <Text>\n              {bookPath.volumeInfo\n                ? bookPath.volumeInfo.description\n                : bookPath.book.description}\n            </Text>\n          </View>\n          <Text style={styles.textTitle}>Book Status</Text>\n          <DropDownPicker\n            containerStyle={{ height: 40 }}\n            defaultValue={status}\n            onChangeItem={(item) => setStatus(item.value)}\n            items={[\n              { label: \"Completed\", value: \"Completed\" },\n              { label: \"Currently Reading\", value: \"Currently Reading\" },\n              { label: \"To Read\", value: \"To Read\" },\n            ]}\n          />\n          {/* CHANGE BELOW CODE TOO */}\n          <Button\n            title='Add to Bookshelf'\n            onPress={() => {\n              axios.post(\"http://localhost:3000/api/books\", {\n                status,\n                book: {\n                  title: bookPath.volumeInfo\n                    ? bookPath.volumeInfo.title\n                    : bookPath.book.title,\n                  image: bookPath.volumeInfo\n                    ? bookPath.volumeInfo.imageLinks.thumbnail\n                    : bookPath.book.image,\n                  authors: bookPath.volumeInfo\n                    ? bookPath.volumeInfo.authors\n                    : bookPath.book.authors,\n                  rating: bookPath.volumeInfo\n                    ? bookPath.volumeInfo.averageRating\n                    : bookPath.book.rating,\n                  description: bookPath.volumeInfo\n                    ? bookPath.volumeInfo.description\n                    : bookPath.book.description,\n                  googleId: props.route.params.id,\n                },\n              });\n            }}\n          />\n          <Button\n            title='Delete from Bookshelf'\n            onPress={() => {\n              axios.delete(\n                `http://localhost:3000/api/${userId}/${bookPath.id}`\n              );\n            }}\n          />\n          {/* <Button\n            title=\"Go Back\"\n            onPress={() => route.navigation.navigate('LandingPage')}\n          /> */}\n        </ScrollView>\n      </SafeAreaView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  center: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  textTitle: {\n    fontWeight: \"bold\",\n    alignContent: \"center\",\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n});\n","// SINGLE event component (child component of AllEvents component)\nimport {\n  Text,\n  StyleSheet,\n  View,\n  Button,\n  Image,\n  TouchableOpacity,\n} from 'react-native';\nimport React from 'react';\nimport axios from 'axios';\nimport {DateTime} from 'luxon';\n\nexport default class SingleEvent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.unregister = this.unregister.bind(this);\n    this.register = this.register.bind(this);\n  }\n  // UNREGISTER the logged in user from a specific event\n  unregister = async () => {\n    try {\n      // make call to update DB by unregistering user\n      await axios.delete(\n        `http://localhost:3000/api/events/${this.props.user}/unregister/${this.props.event.id}`\n      );\n      // if successful, need to update store so can trigger re-render -> do this by calling getEvents fx\n      const res = await this.props.getEvents();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // REGISTER the logged in user for a specific event\n  register = async () => {\n    try {\n      // make call to update DB by registering user\n      await axios.post(\n        `http://localhost:3000/api/events/${this.props.user}/register/${this.props.event.id}`\n      );\n      // if successful, need to update store so can trigger re-render -> do this by calling getEvents fx\n      this.props.getEvents();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  render() {    \n    // passed down event, navigate, and dropdown menu status as props from AllEvents componenet\n    const {event, navigate, status, user} = this.props;\n    // create DateTime instance so can covert to properly formatted string\n    const formattedStartTime= DateTime.fromISO(event.startTime).toLocaleString(DateTime.TIME_SIMPLE);\n    const formattedEndTime= DateTime.fromISO(event.endTime).toLocaleString(DateTime.TIME_SIMPLE);\n    const formattedDate = DateTime.fromISO(event.date).toLocaleString(DateTime.DATE_FULL);\n        \n    return (     \n        <TouchableOpacity onPress={() => navigate.navigate('SingleEventView', event)}>\n            <View style={styles.listContainer} key={event.id}>\n                {/* Adds book image for each event */}\n                <Image\n                    source={{\n                    uri: 'https://static.scientificamerican.com/sciam/cache/file/1DDFE633-2B85-468D-B28D05ADAE7D1AD8_source.jpg?w=590&h=800&D80F3D79-4382-49FA-BE4B4D0C62A5C3ED',\n                    }}\n                    style={styles.image}\n                />\n                {/* Adds event info for each event */}\n                <View style={styles.eventData}>\n                    <Text style={styles.eventTitle}>{event.eventTitle}</Text>\n                    <Text style={styles.date}>Date: {formattedDate}</Text>\n                    <Text style={styles.time}>Start Time: {formattedStartTime}</Text>\n                    <Text style={styles.time}>End Time: {formattedEndTime}</Text>\n                    <Text style={styles.description}>\n                    Description: {event.description}\n                    </Text>\n                \n                {/* if logged in user is the HOST, button can only say 'Edit/Delete'.\n                        if not host, button can also say 'Un/Register' */}\n                <View style={styles.registerButtonContainer}>\n                    {user === event.hostId ? (\n                    <Button\n                        // 'Edit/Delete' button takes you to EditEvent page (ternary off of CreateEvent page)\n                        title={'Edit/Delete'}\n                        onPress={() => {\n                        navigate.navigate('CreateEvent', event); \n                        }}\n                        color=\"white\"\n                        accessibilityLabel=\"Status\"\n                    />\n                    ) : (\n                    <Button\n                        // check the event obj to see if logged-in user exists in the associated user array\n                        // if user exists, that means user is attending and button should give 'Unregister' option\n                        // else, the user isn't registered and should have the button option to 'Register' for the event\n                        title={event.users[0] ? 'Unregister' : 'Register'}\n                        onPress={() => {\n                        event.users[0] ? this.unregister() : this.register();\n                        }}\n                        color=\"white\"\n                        accessibilityLabel=\"Status\"\n                    />\n                    )}       \n                </View>\n                </View>\n            </View>\n        </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollView: {\n    marginHorizontal: 10,\n  },\n  image: {\n    padding: 0,\n    width: 100,\n    height: 100,\n    marginTop: 10,\n    marginLeft: 10,\n  },\n  eventTitle: {\n    fontSize: 20,\n    marginBottom: 2,\n    fontWeight: 'bold',\n  },\n  date: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  time: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  description: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  listContainer: {\n    flexDirection: 'row',\n    borderStyle: 'solid',\n    borderColor: 'black',\n    borderWidth: 1,\n    marginBottom: 15,\n    marginTop: 15,\n  },\n  eventData: {\n    padding: 10,\n    width: 250,\n  },\n  noEvents: {\n    fontSize: 20,\n  },\n  registerButtonContainer: {\n    backgroundColor: '#6475a5',\n    borderRadius: 15,\n    padding: 0.8,\n    width: 130,\n    height: 38,\n    marginLeft: 95,\n  },\n});\n","import {\n  Text,\n  StyleSheet,\n  View,\n  ScrollView,\n  SafeAreaView,\n  Button,\n  TouchableOpacity,\n} from 'react-native';\nimport DropDownPicker from 'react-native-dropdown-picker';\nimport { connect } from 'react-redux';\nimport React from 'react';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport SingleEvent from './SingleEvent';\n// import thunk creator\nimport { fetchEvents } from './store/events';\n\nexport class AllEvents extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      status: 'Upcoming', // state for dropdown menu\n      userId: 1  // hard coded 1 => userId (Selina)  ** need to change to be the variable representing the user Id\n    }\n  }\n  \n  componentDidMount() {\n    // get all events (regardless of attending/created status) for a specific user\n    this.props.getEvents(this.state.userId);  // hard coded above as 1 => userId (Selina)\n  }\n\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <ScrollView style={styles.scrollView}>\n          {/* Adds Navbar */}\n          <TouchableOpacity\n            style={{ alignItems: 'flex-end', margin: 16 }}\n            onPress={this.props.navigation.openDrawer}\n          >\n            <Icon name=\"bars\" size={24} color=\"#161924\" />\n          </TouchableOpacity>\n          {/* Adds create event button */}\n          <View style={styles.createButtonContainer}>\n            <Button\n              title=\"Create Event\"\n              // takes user to CreateEvents page\n              onPress={() => {\n                this.props.navigation.navigate('CreateEvent');\n              }}\n              color=\"white\"\n              accessibilityLabel=\"Create Event\"\n            />\n          </View>\n          {/* Adds Dropdown menu */}\n          <DropDownPicker\n              style={{backgroundColor: '#fafafa'}}\n              itemStyle={{justifyContent: 'flex-start'}}\n              dropDownStyle={{backgroundColor: '#fafafa'}}\n              containerStyle={{ height: 40 }}\n              activeLabelStyle={{color: 'red'}}\n              defaultValue={this.state.status}\n              onChangeItem={item => this.setState({\n                status: item.value\n              })}\n              items={[\n                { label: 'Upcoming Events', value: 'Upcoming' },\n                { label: 'Attending Events', value: 'Attending' },\n                { label: 'Created Events', value: 'Created' },\n              ]}\n          />\n          {/* Adds event list */}\n          <View>\n            {this.props.events === 'There are currently no upcoming events!' ? (\n              <Text style={styles.noEvents}>\n                There are currently no upcoming events!\n              </Text>\n            ) : (\n              // depending on the dropdown menu status and user id, the event list displayed will vary\n              // a SINGLE event should be displayed:\n                // if dropdown status is 'Upcoming\" -OR-\n                // if dropdown status is 'Attending' & logged in user's id is in the users array for that specific event obj -OR-\n                // if dropdown status is 'Created' & logged in user's userId is the same value as the hostId for that specific event obj\n                this.props.events.filter(event => {\n                  return this.state.status === 'Upcoming' || \n                  (this.state.status === 'Attending' && event.users[0]) || \n                  (this.state.status === 'Created' && this.state.userId === event.hostId)\n                // then map to render out each filtered event\n                }).map((event) => (\n                // pass Props to SingleEvent component\n                  <SingleEvent key={event.id} \n                    event={event} \n                    user={this.state.userId} \n                    status={this.state.status} \n                    navigate={this.props.navigation}\n                    getEvents={() => this.props.getEvents(this.state.userId)}\n                    /> \n              ))\n            )}\n          </View>\n        </ScrollView>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst mapState = (state) => {\n  return {\n    events: state.events.all,\n  };\n};\n\nconst mapDispatch = (dispatch) => {\n  return {\n    getEvents: (userId) => dispatch(fetchEvents(userId)),\n  };\n};\n\nexport default connect(mapState, mapDispatch)(AllEvents);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollView: {\n    marginHorizontal: 10,\n  },\n  image: {\n    padding: 0,\n    width: 100,\n    height: 100,\n    marginTop: 10,\n    marginLeft: 10,\n  },\n  eventTitle: {\n    fontSize: 20,\n    marginBottom: 2,\n    fontWeight: 'bold',\n  },\n  date: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  time: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  description: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  createButtonContainer: {\n    backgroundColor: '#6475a5',\n    marginBottom: 20,\n    borderRadius: 15,\n    width: 125,\n    height: 40,\n  },\n  listContainer: {\n    flexDirection: 'row',\n    borderStyle: 'solid',\n    borderColor: 'black',\n    borderWidth: 1,\n    marginBottom: 15,\n    marginTop: 15\n  },\n  eventData: {\n    padding: 10,\n    width: 250,\n  },\n  noEvents: {\n    fontSize: 20,\n  },\n  attendingButtonContainer: {\n    backgroundColor: '#6475a5',\n    borderRadius: 15,\n    padding: 0.8,\n    width: 130,\n    height: 38,\n    marginLeft: 95\n    }\n});\n","// SINGLE EVENT PAGE COMPONENT w/CHAT COMPONENT\n\nimport {\n  Text,\n  StyleSheet,\n  View,\n  Image,\n  SafeAreaView,\n  ScrollView,\n  TouchableOpacity,\n  Button,\n} from 'react-native';\nimport React from 'react';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { DateTime } from 'luxon';\n\nexport default class SingleEventView extends React.Component {\n  render() {\n    const {\n      eventTitle,\n      date,\n      description,\n      startTime,\n      endTime,\n      hostId,\n    } = this.props.route.params;\n\n    // create DateTime instance so can covert to properly formatted string\n    const formattedStartTime = DateTime.fromISO(startTime).toLocaleString(\n      DateTime.TIME_SIMPLE\n    );\n    const formattedEndTime = DateTime.fromISO(endTime).toLocaleString(\n      DateTime.TIME_SIMPLE\n    );\n    const formattedDate = DateTime.fromISO(date).toLocaleString(\n      DateTime.DATE_FULL\n    );\n    return (\n      <SafeAreaView style={styles.container}>\n        <ScrollView style={styles.scrollView}>\n          {/* Adds Navbar */}\n          <TouchableOpacity\n            style={{ alignItems: 'flex-end', margin: 16 }}\n            onPress={this.props.navigation.openDrawer}\n          >\n            <Icon name=\"bars\" size={24} color=\"#161924\" />\n          </TouchableOpacity>\n          <View style={styles.listContainer}>\n            {/* Adds event info */}\n            <View style={styles.eventData}>\n              <Text style={styles.eventTitle}>{eventTitle}</Text>\n              <Text style={styles.date}>Date: {formattedDate}</Text>\n              <Text style={styles.startTime}>\n                Start Time: {formattedStartTime}\n              </Text>\n              <Text style={styles.endTime}>End Time: {formattedEndTime}</Text>\n              <Text style={styles.description}>{description}</Text>\n            </View>\n            {/* Adds book image for each event */}\n            <Image\n              source={{\n                uri:\n                  'https://static.scientificamerican.com/sciam/cache/file/1DDFE633-2B85-468D-B28D05ADAE7D1AD8_source.jpg?w=590&h=800&D80F3D79-4382-49FA-BE4B4D0C62A5C3ED',\n              }}\n              style={styles.image}\n            />\n          </View>\n          <Text>\n            *Live chat shows up below at the exact date and time of the event!\n          </Text>\n          <Button\n            title={'Join Now'}\n            style={styles.clickMe}\n            onPress={() => {\n              this.props.navigation.navigate('Chat', { title: eventTitle });\n            }}\n            color=\"#e9967a\"\n            accessibilityLabel=\"Join Now\"\n          />\n        </ScrollView>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollView: {\n    marginHorizontal: 10,\n  },\n  image: {\n    padding: 0,\n    width: 100,\n    height: 100,\n    marginTop: 10,\n    marginLeft: 8,\n  },\n  eventTitle: {\n    fontSize: 30,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  date: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  startTime: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  endTime: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  description: {\n    fontSize: 15,\n    marginBottom: 5,\n  },\n  listContainer: {\n    flexDirection: 'row',\n    marginBottom: 15,\n    marginTop: 15,\n  },\n  eventData: {\n    padding: 10,\n    width: 250,\n  },\n  clickMe: {\n    backgroundColor: '#ff00ff',\n    borderRadius: 15,\n    padding: 0.8,\n    width: 200,\n    height: 100,\n    marginLeft: 95,\n  },\n});\n","import {\n  Text,\n  TextInput,\n  StyleSheet,\n  View,\n  SafeAreaView,\n  Dimensions,\n  TouchableHighlight,\n  TouchableOpacity,\n  Button,\n  Alert,\n} from 'react-native';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport {\n  postEvent,\n  getSingleEvent,\n  updateEvent,\n  deletedEvent,\n} from './store/event';\n\n//import GoogleAPI from '../test/GoogleAPI';\n\nconst { width: WIDTH } = Dimensions.get('window');\n\nclass CreateEvent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventTitle: this.props.event.id ? this.props.event.eventTitle : '',\n      //update parent component to use start and end date\n      startDate: this.props.event.id ? this.props.event.date : new Date(),\n      endDate: this.props.event.id ? this.props.event.date : new Date(),\n      // time: this.props.event.id ? this.props.event.time : new Date(),\n      description: this.props.event.id ? this.props.event.description : '',\n      hostId: this.props.user.id ? this.props.user.id : 1,\n    };\n    this.handleSubmit.bind(this);\n    this.handleDelete.bind(this);\n    this.handleGoBack.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.event.id && this.props.event.id) {\n      this.setState({\n        eventTitle: this.props.event.eventTitle,\n        date: this.props.event.eventTitle,\n        time: this.props.event.eventTitle,\n        description: this.props.event.eventTitle,\n        host: this.props.user.id,\n      });\n    }\n  }\n  async handleSubmit() {\n    //if event id exist then update the event otherwise create an event\n    let eventId = this.props.event.id;\n    try {\n      eventId\n        ? await this.props.update(host, { ...this.state }, eventId)\n        : await this.props.create({\n            ...this.state,\n            date: this.state.startDate,\n            startTime: this.state.startDate.toLocaleTimeString('en', {\n              hour: '2-digit',\n              minute: '2-digit',\n              hour12: false,\n            }),\n            endTime: this.state.endDate.toLocaleTimeString('en', {\n              hour: '2-digit',\n              minute: '2-digit',\n              hour12: false,\n            }),\n          });\n      this.props.navigation.navigate('AllEvents');\n    } catch (error) {\n      console.log(error);\n      Alert.alert('Error', 'Please fill out all information');\n    }\n  }\n  //catch(error) {\n\n  //}\n\n  handleDelete() {\n    let eventId = this.props.event.id;\n    this.props.delete(host, eventId);\n    this.props.navigation.navigate('AllEvents');\n  }\n\n  handleGoBack() {\n    this.props.navigation.navigate('AllEvents');\n  }\n\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.navbar}>\n          <TouchableOpacity\n            style={styles.navbar}\n            style={{ alignItems: 'flex-end', margin: 16 }}\n            onPress={this.props.navigation.openDrawer}\n          >\n            <Icon name=\"bars\" size={24} color=\"#161924\" />\n          </TouchableOpacity>\n        </View>\n        <Text style={styles.heading}>\n          {this.props.event.id ? 'Update Event' : 'Create Event'}\n        </Text>\n        <View style={styles.inputContainer}>\n          {/* <GoogleAPI /> */}\n          <TextInput\n            style={styles.input}\n            placeholder={'Title'}\n            onChangeText={(eventTitle) => {\n              this.setState({ eventTitle });\n            }}\n          ></TextInput>\n          <DateTimePicker\n            value={this.state.startDate}\n            mode=\"date\"\n            display=\"default\"\n            onChange={(event, selectedDate) =>\n              this.setState({\n                startDate: selectedDate,\n                endDate: selectedDate,\n              })\n            }\n          />\n          {/* <TextInput\n            style={styles.input}\n            placeholder={\"Date (mm/dd/yy)\"}\n            value={this.state.date}\n            onChangeText={(date) => {\n              this.setState({ date });\n            }}\n          ></TextInput> */}\n          <DateTimePicker\n            value={this.state.startDate}\n            mode=\"time\"\n            display=\"default\"\n            onChange={(event, selectedTime) =>\n              this.setState({\n                startDate: selectedTime,\n              })\n            }\n          />\n          <DateTimePicker\n            value={this.state.endDate}\n            mode=\"time\"\n            display=\"default\"\n            onChange={(event, selectedTime) =>\n              this.setState({\n                endDate: selectedTime,\n              })\n            }\n          />\n\n          {/* <TextInput\n            style={styles.input}\n            placeholder={\"Time (00:00Am - 00:00pm)\"}\n            value={this.state.time}\n            onChangeText={(time) => {\n              this.setState({ time });\n            }}\n          ></TextInput> */}\n\n          <TextInput\n            style={[styles.input, description]}\n            placeholder={'Description'}\n            onChangeText={(description) => {\n              this.setState({ description });\n            }}\n          ></TextInput>\n\n          <TouchableHighlight\n            style={styles.button}\n            onPress={() => this.handleSubmit()}\n          >\n            <Text style={styles.submitText}>Submit</Text>\n          </TouchableHighlight>\n\n          {this.props.event.id ? (\n            <Button title=\"Delete Event\" opPress={() => this.handleDelete()} />\n          ) : (\n            <Button title=\"Go Back\" onPress={() => this.handleGoBack()} />\n          )}\n        </View>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst description = { height: 155 };\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n  },\n  inputContainer: {\n    //backgroundColor:'#f0f8ff',\n  },\n  heading: {\n    fontSize: 40,\n  },\n  input: {\n    width: WIDTH - 55,\n    height: 35,\n    marginTop: 20,\n    backgroundColor: '#f0f8ff',\n    borderRadius: 50,\n    borderWidth: 1.5,\n  },\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#6475a5',\n    padding: 10,\n    borderRadius: 45,\n    marginTop: 20,\n    borderWidth: 1.5,\n  },\n  submitText: {\n    color: 'white',\n    fontSize: 15,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    bottom: 2,\n  },\n  navbar: {\n    paddingLeft: 300,\n  },\n});\nconst mapState = (state) => {\n  return {\n    event: state.event,\n    user: state.user,\n  };\n};\n\nconst mapDispatch = (dispatch) => {\n  return {\n    create: (newEventInfo) => dispatch(postEvent(newEventInfo)),\n    update: (userId, editedInfo, eventId) =>\n      dispatch(updateEvent(userId, editedInfo, eventId)),\n    delete: (userId, eventId) => dispatch(deletedEvent(userId, eventId)),\n  };\n};\nexport default connect(mapState, mapDispatch)(CreateEvent);\n","import React, { useState, useEffect } from 'react';\nimport {\n  SafeAreaView,\n  ScrollView,\n  View,\n  Text,\n  StyleSheet,\n  StatusBar,\n  Dimensions,\n  TouchableOpacity,\n  Image,\n} from 'react-native';\nimport { connect, useDispatch } from 'react-redux';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { getUserProfile, getBooks } from './store/userProfile';\n\nconst { width: WIDTH } = Dimensions.get('window');\n\nconst UserProfile = (props) => {\n  console.log('PROPS --->', props.route.params.userId);\n  // console.log(\"props in userprofile component\", props)\n  //hardcode it to 1 since no user loged in\n\n  let id = props.userId || 4;\n  let mybooks = props.books || [];\n  //const [user, setUser] = useState(id);\n  const [books, setbooks] = useState(mybooks);\n\n  //do not need this if we can get the user through props\n  // useEffect(()=> {\n  //     dispatch(getUser)\n  // })\n\n  //gettting books by status\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getBooks(id));\n  }, [books]);\n\n  //filter the saved books by status\n  let currentBooks = mybooks.filter(\n    (book) => book.status === 'Currently Reading'\n  );\n  let futureRead = mybooks.filter((book) => book.status === 'To Read');\n  let completed = mybooks.filter((book) => book.status === 'Completed');\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView}>\n        <View style={styles.navbar}>\n          <TouchableOpacity\n            style={styles.navbar}\n            style={{ alignItems: 'flex-end', margin: 16 }}\n            onPress={props.navigation.openDrawer}\n          >\n            <Icon name=\"bars\" size={24} color=\"#161924\" />\n          </TouchableOpacity>\n        </View>\n\n        <View>\n          <Text style={styles.heading}>My Bookshelf</Text>\n        </View>\n\n        {/* <View>\n                <Text style={styles.text}>My Bookshelf</Text>\n                </View> */}\n        <View>\n          <Text>{props.id}</Text>\n          <Text style={styles.text}>Currently Reading</Text>\n          <ScrollView horizontal={true}>\n            <View style={styles.bookList}>\n              {currentBooks.length > 0 ? (\n                currentBooks.map((book, idx) => (\n                  <TouchableOpacity\n                    key={idx}\n                    onPress={() => {\n                      props.navigation.navigate('SingleBookView', book);\n                    }}\n                  >\n                    <View style={styles.bookData}>\n                      <Image\n                        alt={book.book.title}\n                        style={{ width: 100, height: 150 }}\n                        source={{\n                          uri: book.book.image,\n                        }}\n                      />\n                      <Text>{book.book.title}</Text>\n                    </View>\n                  </TouchableOpacity>\n                ))\n              ) : (\n                <Text>No books</Text>\n              )}\n            </View>\n          </ScrollView>\n        </View>\n\n        <View>\n          <Text style={styles.text}>To Read</Text>\n          <ScrollView horizontal={true}>\n            <View style={styles.bookList}>\n              {futureRead.length > 0 ? (\n                futureRead.map((book, idx) => (\n                  <TouchableOpacity\n                    key={idx}\n                    onPress={() => {\n                      props.navigation.navigate('SingleBookView', book);\n                    }}\n                  >\n                    <View style={styles.bookData}>\n                      <Image\n                        alt={book.book.title}\n                        style={{ width: 100, height: 150 }}\n                        source={{\n                          uri: book.book.image,\n                        }}\n                      />\n                      <Text>{book.book.title}</Text>\n                    </View>\n                  </TouchableOpacity>\n                ))\n              ) : (\n                <Text>No books</Text>\n              )}\n            </View>\n          </ScrollView>\n        </View>\n\n        <View>\n          <Text style={styles.text}>Completed</Text>\n          <ScrollView horizontal={true}>\n            <View style={styles.bookList}>\n              {completed.length > 0 ? (\n                completed.map((book, idx) => (\n                  <TouchableOpacity\n                    key={idx}\n                    onPress={() => {\n                      props.navigation.navigate('SingleBookView', book);\n                    }}\n                  >\n                    <View style={styles.bookData}>\n                      <Image\n                        alt={book.book.title}\n                        style={{ width: 100, height: 150 }}\n                        source={{\n                          uri: book.book.image,\n                        }}\n                      />\n                      <Text>{book.book.title}</Text>\n                    </View>\n                  </TouchableOpacity>\n                ))\n              ) : (\n                <Text>No books</Text>\n              )}\n            </View>\n          </ScrollView>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: StatusBar.currentHeight,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  heading: {\n    fontSize: 40,\n    margin: 0,\n  },\n  content: {\n    marginTop: 20,\n    flexDirection: 'row',\n    width: '80%',\n    height: 35,\n    borderRadius: 50,\n    borderWidth: 1.5,\n    alignItems: 'center',\n    paddingTop: 5,\n  },\n  bookList: {\n    flexDirection: 'row',\n  },\n  text: {\n    fontSize: 20,\n  },\n  bookData: {},\n  scrollView: {\n    backgroundColor: '#f0f8ff',\n    marginHorizontal: 1,\n    width: WIDTH - 20,\n  },\n});\n\nconst mapState = (state) => ({\n  books: state.userProfile,\n  userId: state.user.id,\n});\n\nconst mapDispatch = (dispatch) => ({\n  //getUser: (userId) => dispatch(getUserProfile(userId)),\n  getBooks: (userId) => dispatch(getBooks(userId)),\n});\n\nexport default connect(mapState, mapDispatch)(UserProfile);\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { View, ScrollView, Text, Button, StyleSheet } from 'react-native';\nimport { Bubble, GiftedChat } from 'react-native-gifted-chat';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    setMessages([\n      {\n        _id: 1,\n        text: 'Hello developer',\n        createdAt: new Date(),\n        user: {\n          _id: 2,\n          name: 'React Native',\n          avatar: 'https://placeimg.com/140/140/any',\n        },\n      },\n    ]);\n  }, []);\n\n  const onSend = useCallback((messages = []) => {\n    setMessages((previousMessages) =>\n      GiftedChat.append(previousMessages, messages)\n    );\n  }, []);\n\n  // Changes styling on Chat bubble messages\n  const renderBubble = (props) => {\n    return (\n      <Bubble\n        {...props}\n        wrapperStyle={{\n          right: {\n            backgroundColor: '#6475a5',\n          },\n        }}\n        textStyle={{\n          right: {\n            color: '#fff',\n          },\n        }}\n      />\n    );\n  };\n\n  return (\n    <GiftedChat\n      messages={messages}\n      onSend={(messages) => onSend(messages)}\n      user={{\n        _id: 1,\n      }}\n      renderBubble={renderBubble}\n      alwaysShowSend\n      scrollToBottom\n    />\n  );\n};\n\nexport default Chat;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\n// import { Text, TextInput, StyleSheet, View } from 'react-native';\n// import React, { Component } from 'react';\n\n// if (!window.location) {\n//   // App is running in simulator\n//   window.navigator.userAgent = 'react-native';\n// }\n\n// import { io } from 'socket.io-client';\n\n// // const io = require('socket.io-client/socket.io');\n\n// class Chat extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       chatMessage: '',\n//       discussion: [],\n//     };\n//   }\n\n//   componentDidMount() {\n//     // Instead of connecting with local backend server...\n//     // We are connecting with NGROK (allows us to access local backend server)\n//     // MAKE SURE to have ngrok installed on your terminal\n//     // After installed, run 'ngrok http 3000' on your terminal\n//     // Paste generated URL into 'this.socket = io('****HERE***')' (line 36)\n\n//     // this.socket = io('http://127.0.0.1:3000', {\n//     //   transports: ['websocket'],\n//     //   jsonp: false,\n//     // });\n//     this.socket = io('http://721e1df4d08b.ngrok.io', {\n//       transports: ['websocket'],\n//       jsonp: false,\n//     });\n//     this.socket.connect();\n\n//     const thisComponent = this;\n\n//     //connection between client and server starts\n//     // Step4: (putting msg to the front end) listening for the 'messages' event from the backend index.js line 10\n//     this.socket.on('connect', () => {\n//       console.log('Connected to socket server');\n//     });\n//     this.socket.on('messages', (msg) => {\n//       //[listening..]it's adding emitted discussion to the discussion already exist\n//       console.log('**msg**', msg);\n//       console.log(\n//         'THISCOMPONENT.STATE.DISCUSSION ->',\n//         thisComponent.state.discussion\n//       );\n//       // console.log('thisComponent ->', this);\n//       const discussion = thisComponent.state.discussion.slice();\n//       thisComponent.setState({ discussion: [...discussion, msg] });\n//       console.log('**discussion!', thisComponent.state.discussion);\n//     });\n//   }\n\n//   submitChatMessage() {\n//     //step1: socket is emitting chat message to the backend line6 of index.js\n//     this.socket.emit('chat message', this.state.chatMessage);\n//     console.log('in submit chat message: ', this.state.chatMessage);\n//     this.setState({ chatMessage: '' });\n//   }\n\n//   render() {\n//     const discussion = this.state.discussion.map((chatMessage, index) => (\n//       <Text key={index} style={styles.chatStyle}>\n//         {chatMessage}\n//       </Text>\n//     ));\n//     return (\n//       <View style={styles.container}>\n//         {discussion}\n//         <TextInput\n//           style={{\n//             height: 40,\n//             width: '100%',\n//             borderWidth: 2,\n//             top: 500,\n//             position: 'absolute',\n//             justifyContent: 'center',\n//           }}\n//           autoCorrect={false}\n//           value={this.state.chatMessage}\n//           onSubmitEditing={() => this.submitChatMessage()}\n//           onChangeText={(chatMessage) => {\n//             this.setState({ chatMessage });\n//           }}\n//         />\n//       </View>\n//     );\n//   }\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     // height: 400,\n//     flex: 1,\n//     backgroundColor: '#F5FCFF',\n//   },\n//   chatStyle: {\n//     height: 30,\n//     borderWidth: 2,\n//     marginTop: 20,\n//     backgroundColor: '#F5FCFF',\n//   },\n// });\n\n// export default Chat;\n","import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  Image,\n  ScrollView,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { Formik } from 'formik';\nimport axios from 'axios';\n\nimport { AuthContext } from './context';\n\nconst Login = (props) => {\n  const [secureTextEntry, setSecure] = React.useState(true);\n\n  const { logIn } = React.useContext(AuthContext);\n\n  const updateSecureTextEntry = () => {\n    setSecure(!secureTextEntry);\n  };\n\n  // If inputted Login info is correct, navigate user info to RootNavigation's logIn function\n  const handlePress = (user) => {\n    logIn(user);\n  };\n\n  return (\n    <ScrollView>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        onSubmit={async (values) => {\n          // If user didn't input anything:\n          if (values.email === '' || values.password === '') {\n            Alert.alert('Error', 'Username and/or password cannot be empty.');\n          } else {\n            // If user did, axios call to lookup user login info\n            try {\n              let res = await axios.post('http://localhost:3000/auth/login/', {\n                email: values.email,\n                password: values.password,\n              });\n              // handlePress = passes user info to function that will pass to RootNavigation's logIn function\n              handlePress({ user: res.data });\n              // If user info is invalid:\n            } catch {\n              Alert.alert(\n                'Error',\n                'Incorrect username or password. Please try again.'\n              );\n            }\n          }\n        }}\n      >\n        {(props) => (\n          <View style={styles.container}>\n            {/* Icon Image */}\n            <Image\n              source={{\n                uri: 'https://img.icons8.com/plasticine/2x/pocket.png',\n              }}\n              resizeMode=\"center\"\n              style={styles.image}\n            />\n            <Text style={styles.heading}>Login</Text>\n            <Text>Welcome to Pocketbook!</Text>\n\n            {/* Email Address Input */}\n            <View style={styles.inputContainer}>\n              <Icon\n                name={'envelope'}\n                size={30}\n                color={'grey'}\n                style={styles.icon}\n              />\n              <TextInput\n                style={styles.inputText}\n                placeholder={'Email Address'}\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                onChangeText={props.handleChange('email')}\n                value={props.values.email}\n              />\n            </View>\n\n            {/* Password Input */}\n            <View style={styles.inputContainer}>\n              <Icon\n                name={'lock'}\n                size={30}\n                color={'grey'}\n                style={styles.icon}\n              />\n              <TextInput\n                style={styles.inputText}\n                secureTextEntry={secureTextEntry ? true : false}\n                placeholder={'Password'}\n                returnKeyType=\"go\"\n                onChangeText={props.handleChange('password')}\n                value={props.values.password}\n              />\n              {/* Adds eye button that toggles whether password input is hidden or not */}\n              <TouchableOpacity\n                style={styles.btnEye}\n                onPress={updateSecureTextEntry}\n              >\n                <Icon\n                  name={secureTextEntry ? 'eye-slash' : 'eye'}\n                  size={20}\n                  color={'grey'}\n                />\n              </TouchableOpacity>\n            </View>\n\n            {/* Login Button */}\n            <TouchableOpacity\n              style={[styles.inputContainer, styles.submitContainer]}\n              onPress={props.handleSubmit}\n            >\n              <Text style={styles.submitText}>LOGIN</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </Formik>\n      {/* Don't have an account? Navigates to Sign Up component */}\n      <View style={styles.navContainer}>\n        <Text>Don't have an account?</Text>\n        <Text\n          style={[{ color: 'blue' }, { marginLeft: 3 }]}\n          onPress={() =>\n            props.navigation.navigate('SignUp', { loggedIn: false })\n          }\n        >\n          Sign Up!\n        </Text>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 400,\n    height: 100,\n    marginTop: 120,\n  },\n  heading: {\n    fontSize: 40,\n  },\n  icon: {\n    top: 8,\n    left: 20,\n    position: 'absolute',\n  },\n  // Edits the round container around the Input\n  inputContainer: {\n    marginTop: 20,\n    flexDirection: 'row',\n    width: '90%',\n    height: 50,\n    borderRadius: 50,\n    borderWidth: 2,\n    paddingTop: 5,\n  },\n  inputText: {\n    fontWeight: 'bold',\n    marginLeft: 60,\n    width: '80%',\n  },\n  submitContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#6475a5',\n  },\n  submitText: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    bottom: 2,\n  },\n  navContainer: {\n    flexDirection: 'row',\n    marginVertical: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  btnEye: {\n    position: 'absolute',\n    top: 12,\n    right: 20,\n  },\n});\n\nexport default Login;\n","import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  Image,\n  ScrollView,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport * as Animatable from 'react-native-animatable';\nimport { Formik } from 'formik';\nimport axios from 'axios';\n\nimport { AuthContext } from './context';\n\nconst SignUp = (props) => {\n  const { signUp } = React.useContext(AuthContext);\n\n  const [validate, setValidate] = React.useState({\n    isValidEmail: true,\n    isValidUser: true,\n    isValidPassword: true,\n    secureTextEntry: true,\n  });\n\n  const handleValidUser = (val) => {\n    if (val.trim().length >= 4) {\n      setValidate({\n        ...validate,\n        isValidUser: true,\n      });\n    } else {\n      setValidate({\n        ...validate,\n        isValidUser: false,\n      });\n    }\n  };\n\n  const handleValidPassword = (val) => {\n    if (val.trim().length >= 8) {\n      setValidate({\n        ...validate,\n        isValidPassword: true,\n      });\n    } else {\n      setValidate({\n        ...validate,\n        isValidPassword: false,\n      });\n    }\n  };\n\n  const handleEmail = (val) => {\n    // Using regex to check for possible valid email input\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (regex.test(val)) {\n      setValidate({\n        ...validate,\n        isValidEmail: true,\n      });\n    } else {\n      setValidate({\n        ...validate,\n        isValidEmail: false,\n      });\n    }\n  };\n\n  const updateSecureTextEntry = () => {\n    setValidate({\n      ...validate,\n      secureTextEntry: !validate.secureTextEntry,\n    });\n  };\n\n  // If inputted Signup info is valid, navigate user over to DrawerNavigaton\n  const handlePress = (user) => {\n    signUp(user);\n  };\n\n  return (\n    <ScrollView>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n          username: '',\n          firstName: '',\n          lastName: '',\n        }}\n        onSubmit={async (values) => {\n          // Adding user validation (>= 4 chars) and password validation (>= 8 chars)\n          if (!validate.isValidUser || !validate.isValidPassword) {\n            Alert.alert('Error', 'Please fix the error(s) and try again.');\n            // Once that's validated, axios runs call to signup and navigate to App screen\n          } else {\n            try {\n              let res = await axios.post('http://localhost:3000/auth/signup/', {\n                email: values.email,\n                password: values.password,\n                username: values.username,\n                firstName: values.firstName,\n                lastName: values.lastName,\n              });\n              // handlePress = passes user info to function that will navigate to DrawerNavigaton\n              handlePress({ user: res.data });\n              // If there was a problem signing up, display an alert error\n            } catch (err) {\n              alert(err);\n              // Alert.alert('Error', 'Please fix the errors and try again.');\n            }\n          }\n        }}\n      >\n        {(props) => (\n          <View style={styles.container}>\n            {/* Icon Image */}\n            <Image\n              source={{\n                uri: 'https://i.ibb.co/rpJ7vjb/signupbook.png',\n              }}\n              style={styles.image}\n            />\n            <Text style={styles.heading}>Sign Up</Text>\n            <Text>to join the book lovers community!</Text>\n\n            <View style={styles.name}>\n              {/* First Name Input */}\n              <View style={styles.nameContainer}>\n                <TextInput\n                  style={styles.nameText}\n                  placeholder={'First Name'}\n                  onChangeText={props.handleChange('firstName')}\n                  value={props.values.firstName}\n                />\n              </View>\n\n              {/* Last Name Input */}\n              <View style={styles.nameContainer}>\n                <TextInput\n                  style={styles.nameText}\n                  placeholder={'Last Name'}\n                  onChangeText={props.handleChange('lastName')}\n                  value={props.values.lastName}\n                />\n              </View>\n            </View>\n\n            {/* Email Input */}\n            <View style={styles.inputContainer}>\n              <Icon\n                name={'envelope'}\n                size={19}\n                color={'grey'}\n                style={styles.icon}\n              />\n              <TextInput\n                style={styles.inputText}\n                placeholder={'Email Address'}\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                onChangeText={props.handleChange('email')}\n                onEndEditing={(e) => handleEmail(e.nativeEvent.text)}\n                value={props.values.email}\n              />\n            </View>\n            {validate.isValidEmail ? null : (\n              <Animatable.View animation=\"zoomIn\" duration={500}>\n                <Text style={styles.errorMsg}>Please enter a valid email.</Text>\n              </Animatable.View>\n            )}\n\n            {/* Username Input */}\n            <View style={styles.inputContainer}>\n              <Icon\n                name={'user'}\n                size={19}\n                color={'grey'}\n                style={styles.icon}\n              />\n              <TextInput\n                style={styles.inputText}\n                placeholder={'Username'}\n                autoCapitalize=\"none\"\n                onChangeText={props.handleChange('username')}\n                onEndEditing={(e) => handleValidUser(e.nativeEvent.text)}\n                value={props.values.username}\n              />\n            </View>\n            {/* Text shows up if username is < 4 chars */}\n            {validate.isValidUser ? null : (\n              <Animatable.View animation=\"zoomIn\" duration={500}>\n                <Text style={styles.errorMsg}>\n                  Username must be 4 characters long.\n                </Text>\n              </Animatable.View>\n            )}\n\n            {/* Password Input */}\n            <View style={styles.inputContainer}>\n              <Icon\n                name={'lock'}\n                size={20}\n                color={'grey'}\n                style={styles.icon}\n              />\n              <TextInput\n                style={styles.inputText}\n                secureTextEntry={validate.secureTextEntry ? true : false}\n                placeholder={'Password'}\n                onChangeText={props.handleChange('password')}\n                onEndEditing={(e) => handleValidPassword(e.nativeEvent.text)}\n                value={props.values.password}\n              />\n              {/* Adds eye button that toggles whether password input is hidden or not */}\n              <TouchableOpacity\n                style={styles.btnEye}\n                onPress={updateSecureTextEntry}\n              >\n                <Icon\n                  name={validate.secureTextEntry ? 'eye-slash' : 'eye'}\n                  size={15}\n                  color={'grey'}\n                />\n              </TouchableOpacity>\n            </View>\n            {/* Text shows up if password is < 8 chars */}\n            {validate.isValidPassword ? null : (\n              <Animatable.View animation=\"zoomIn\" duration={500}>\n                <Text style={styles.errorMsg}>\n                  Password must be 8 characters long.\n                </Text>\n              </Animatable.View>\n            )}\n\n            {/* Sign Up Button */}\n            <TouchableOpacity\n              style={[styles.inputContainer, styles.submitContainer]}\n              onPress={props.handleSubmit}\n            >\n              <Text style={styles.submitText}>SIGN UP</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </Formik>\n      {/* Already have an account? Navigates to Login component */}\n      <View style={styles.navContainer}>\n        <Text> Already have an account?</Text>\n        <Text\n          style={[{ color: 'blue' }, { marginLeft: 3 }]}\n          onPress={() => props.navigation.navigate('Login')}\n        >\n          Login!\n        </Text>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    padding: 0,\n    width: 100,\n    height: 100,\n    marginTop: 50,\n  },\n  heading: {\n    margin: 0,\n    fontSize: 40,\n  },\n  name: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  nameText: {\n    fontWeight: 'bold',\n    marginLeft: 10,\n    marginTop: 8,\n    width: '80%',\n  },\n  inputContainer: {\n    marginTop: 20,\n    flexDirection: 'row',\n    width: '80%',\n    height: 35,\n    borderRadius: 50,\n    borderWidth: 1.5,\n    // justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: 5,\n  },\n  nameContainer: {\n    marginTop: 20,\n    marginRight: 5,\n    width: 145,\n    height: 35,\n    borderRadius: 50,\n    borderWidth: 1.5,\n  },\n  icon: {\n    top: 5,\n    left: 20,\n    position: 'absolute',\n  },\n  inputText: {\n    fontWeight: 'bold',\n    marginBottom: 4,\n    marginLeft: 50,\n    width: '80%',\n  },\n  submitContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#6475a5',\n  },\n  submitText: {\n    color: 'white',\n    fontSize: 15,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    bottom: 2,\n  },\n  navContainer: {\n    flexDirection: 'row',\n    marginVertical: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  errorMsg: {\n    color: '#FF0000',\n    fontSize: 12,\n    marginBottom: -5,\n  },\n  btnEye: {\n    position: 'absolute',\n    top: 7,\n    right: 15,\n  },\n});\n\n// const mapStateToProps = (state) => ({\n//   method: 'SignUp',\n//   user: state.user,\n// });\n\n// const mapDispatchToProps = (dispatch) =>\n//   bindActionCreators(\n//     {\n//       auth,\n//     },\n//     dispatch\n//   );\n\nexport default SignUp;\n\n// export default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport Login from '../Login';\nimport SignUp from '../SignUp';\n\nconst Auth = createStackNavigator();\n\nconst AuthNavigation = ({ navigation }) => (\n  <Auth.Navigator headerMode=\"none\" initialRouteName=\"Login\">\n    <Auth.Screen name=\"Login\" component={Login} />\n    <Auth.Screen name=\"SignUp\" component={SignUp} />\n  </Auth.Navigator>\n);\n\nexport default AuthNavigation;\n","import * as React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport LandingPage from '../LandingPage';\nimport SingleBookView from '../SingleBookView';\nimport AllEvents from '../AllEvents';\nimport CreateEvent from '../CreateEvent';\nimport SingleEventView from '../SingleBookView';\nimport UserProfile from '../SingleBookView';\nimport Chat from '../Chat';\n\nconst Stack = createStackNavigator();\n\nconst StackContainer = (props) => (\n  <Stack.Navigator>\n    <Stack.Screen\n      name=\"LandingPage\"\n      component={LandingPage}\n      options={{ headerShown: false }}\n    />\n    <Stack.Screen\n      name=\"SingleBookView\"\n      component={SingleBookView}\n      options={{ headerShown: false }}\n    />\n    <Stack.Screen\n      name=\"AllEvents\"\n      component={AllEvents}\n      options={{ headerShown: false }}\n    />\n    <Stack.Screen\n      name=\"CreateEvent\"\n      component={CreateEvent}\n      options={{ headerShown: false }}\n    />\n    <Stack.Screen\n      name=\"SingleEventView\"\n      component={SingleEventView}\n      options={{ headerShown: false }}\n    />\n    <Stack.Screen\n      name=\"UserProfile\"\n      component={UserProfile}\n      options={{ headerShown: false }}\n    />\n    <Stack.Screen\n      name=\"Chat\"\n      component={Chat}\n      options={({ route }) => ({\n        title: route.params.title,\n        headerBackTitleVisible: false,\n      })}\n    />\n  </Stack.Navigator>\n);\n\nexport default StackContainer;\n","import React, { useEffect } from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport { Provider } from 'react-redux';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { useDispatch } from 'react-redux';\nimport store from '../store';\nimport { AuthContext } from '../context';\nimport AsyncStorage from '@react-native-community/async-storage';\n\n// Import Screens:\nimport Sidebar from '../Sidebar';\nimport LandingPage from '../LandingPage';\nimport SingleBookView from '../SingleBookView';\nimport AllEvents from '../AllEvents';\nimport SingleEventView from '../SingleEventView';\nimport CreateEvent from '../CreateEvent';\nimport UserProfile from '../UserProfile';\nimport Chat from '../Chat';\nimport AuthNavigation from './AuthNavigation';\nimport StackContainer from './StackContainer';\n\nconst Drawer = createDrawerNavigator();\n\nconst RootContainer = () => {\n  const initialLoginState = {\n    isLoading: true,\n    userId: null,\n    userToken: null,\n  };\n\n  // Reducer for different case scenarios\n  const loginReducer = (prevState, action) => {\n    switch (action.type) {\n      case 'GET_TOKEN':\n        return {\n          ...prevState,\n          userId: action.id,\n          userToken: action.token,\n          isLoading: false,\n        };\n      case 'LOGIN':\n        return {\n          ...prevState,\n          userId: action.id,\n          userToken: action.token,\n          isLoading: false,\n        };\n      case 'LOGOUT':\n        return {\n          ...prevState,\n          userToken: null,\n          isLoading: false,\n        };\n      case 'SIGNUP':\n        return {\n          ...prevState,\n          userId: action.id,\n          userToken: action.token,\n          isLoading: false,\n        };\n    }\n  };\n\n  // loginState = state object that consists of initialState Object\n  const [loginState, dispatch] = React.useReducer(\n    loginReducer,\n    initialLoginState\n  );\n  console.log('LOGIN STATE -->', loginState);\n\n  // We will be passing authContext throughout our app\n  const authContext = React.useMemo(\n    () => ({\n      logIn: async (res) => {\n        try {\n          // Set userToken to inputted user's username and store it in AsyncStorage\n          userToken = res.user.username;\n          userId = res.user.id.toString();\n          await AsyncStorage.setItem('userToken', userToken);\n          await AsyncStorage.setItem('userId', userId);\n        } catch (err) {\n          console.log(err);\n        }\n        dispatch({\n          type: 'LOGIN',\n          id: userId,\n          token: userToken,\n        });\n      },\n      logOut: async () => {\n        try {\n          await AsyncStorage.removeItem('userToken');\n        } catch (err) {\n          console.log(err);\n        }\n        dispatch({ type: 'LOGOUT' });\n      },\n      signUp: async (res) => {\n        try {\n          userToken = res.user.username;\n          userId = res.user.id.toString();\n          await AsyncStorage.setItem('userToken', userToken);\n          await AsyncStorage.setItem('userId', userId);\n        } catch (err) {\n          console.log(err);\n        }\n        dispatch({\n          type: 'SIGNUP',\n          id: userId,\n          token: userToken,\n        });\n      },\n    }),\n    []\n  );\n\n  useEffect(() => {\n    setTimeout(async () => {\n      // Set userToken to null\n      let userToken = null;\n      try {\n        // Fetch userId and userToken from AsyncStorage\n        userId = await AsyncStorage.getItem('userId');\n        userToken = await AsyncStorage.getItem('userToken');\n      } catch (err) {\n        console.log(err);\n      }\n      // If token is found, dispatch for token\n      // Otherwise, userToken stays null\n      dispatch({\n        type: 'GET_TOKEN',\n        id: userId,\n        token: userToken,\n      });\n    }, 1000);\n  }, []);\n\n  // Spinning icon state, during which user is determined to be logged in or not\n  if (loginState.isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n  }\n\n  // If user is logged in (has a token attached), show DrawerNavigaton\n  // Otherwise, show AuthNavigation\n  return (\n    <Provider store={store}>\n      <AuthContext.Provider value={authContext}>\n        <NavigationContainer>\n          {loginState.userToken !== null ? (\n            <Drawer.Navigator\n              drawerContent={(props) => <Sidebar {...props} {...loginState} />}\n            >\n              <Drawer.Screen name=\"Home\" component={StackContainer} />\n              <Drawer.Screen name=\"LandingPage\" component={LandingPage} />\n              <Drawer.Screen\n                name=\"SingleBookView\"\n                component={SingleBookView}\n                initialParams={{ userId: loginState.userId }}\n              />\n              <Drawer.Screen\n                name=\"UserProfile\"\n                component={UserProfile}\n                initialParams={{ userId: loginState.userId }}\n              />\n              <Drawer.Screen\n                name=\"AllEvents\"\n                component={AllEvents}\n                initialParams={{ userId: loginState.userId }}\n              />\n              <Drawer.Screen\n                name=\"CreateEvent\"\n                component={CreateEvent}\n                initialParams={{ userId: loginState.userId }}\n              />\n              <Drawer.Screen\n                name=\"SingleEventView\"\n                component={SingleEventView}\n                initialParams={{ userId: loginState.userId }}\n              />\n            </Drawer.Navigator>\n          ) : (\n            <AuthNavigation />\n          )}\n        </NavigationContainer>\n      </AuthContext.Provider>\n    </Provider>\n  );\n};\n\nexport default RootContainer;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './client/store';\n\nimport RootContainer from './client/navigation/RootContainer';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <RootContainer />\n    </Provider>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}